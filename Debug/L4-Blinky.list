
L4-Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009338  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009544  08009544  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800954c  0800954c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  20000090  080095e4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  080095e4  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a669  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003385  00000000  00000000  0003a729  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  0003dab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  0003eb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b354  00000000  00000000  0003f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe96  00000000  00000000  0006ad4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd313  00000000  00000000  0007abe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177ef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  00177f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080094cc 	.word	0x080094cc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	080094cc 	.word	0x080094cc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 face 	bl	8000aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f829 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f8ef 	bl	80006ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800050e:	f000 f8c1 	bl	8000694 <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 8000512:	f008 fbe5 	bl	8008ce0 <MX_USB_HOST_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#include <string.h>
  char msg[] = "Hello WEST!\r\n";
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <main+0x54>)
 8000518:	463c      	mov	r4, r7
 800051a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800051c:	c407      	stmia	r4!, {r0, r1, r2}
 800051e:	8023      	strh	r3, [r4, #0]
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x58>)
 8000524:	f000 fe10 	bl	8001148 <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 8000528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052c:	f000 fb2e 	bl	8000b8c <HAL_Delay>

	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), 0xFFFF);
 8000530:	463b      	mov	r3, r7
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe5a 	bl	80001ec <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	4639      	mov	r1, r7
 800053e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <main+0x5c>)
 8000544:	f003 fe8e 	bl	8004264 <HAL_UART_Transmit>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000548:	f008 fbf0 	bl	8008d2c <MX_USB_HOST_Process>
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 800054c:	e7e8      	b.n	8000520 <main+0x24>
 800054e:	bf00      	nop
 8000550:	080094e4 	.word	0x080094e4
 8000554:	48000400 	.word	0x48000400
 8000558:	200000c0 	.word	0x200000c0

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b0ba      	sub	sp, #232	; 0xe8
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000566:	2244      	movs	r2, #68	; 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f008 feec 	bl	8009348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	228c      	movs	r2, #140	; 0x8c
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f008 fede 	bl	8009348 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800058c:	f002 fa8c 	bl	8002aa8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000590:	4b3f      	ldr	r3, [pc, #252]	; (8000690 <SystemClock_Config+0x134>)
 8000592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000596:	4a3e      	ldr	r2, [pc, #248]	; (8000690 <SystemClock_Config+0x134>)
 8000598:	f023 0318 	bic.w	r3, r3, #24
 800059c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a0:	2314      	movs	r3, #20
 80005a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80005b8:	2390      	movs	r3, #144	; 0x90
 80005ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c4:	2301      	movs	r3, #1
 80005c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ca:	2305      	movs	r3, #5
 80005cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 71;
 80005d0:	2347      	movs	r3, #71	; 0x47
 80005d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80005e2:	2306      	movs	r3, #6
 80005e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 faef 	bl	8002bd0 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005f8:	f000 f914 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2303      	movs	r3, #3
 8000604:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000608:	2390      	movs	r3, #144	; 0x90
 800060a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fefa 	bl	800341c <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800062e:	f000 f8f9 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
 8000632:	f242 0320 	movw	r3, #8224	; 0x2020
 8000636:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000638:	2300      	movs	r3, #0
 800063a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800063c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000640:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000642:	2301      	movs	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000646:	2305      	movs	r3, #5
 8000648:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800064a:	2314      	movs	r3, #20
 800064c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800065a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800065e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f8de 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800066e:	f000 f8d9 	bl	8000824 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000676:	f002 fa35 	bl	8002ae4 <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000680:	f000 f8d0 	bl	8000824 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000684:	f003 fbc6 	bl	8003e14 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000688:	bf00      	nop
 800068a:	37e8      	adds	r7, #232	; 0xe8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000

08000694 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_LPUART1_UART_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006d2:	f003 fd79 	bl	80041c8 <HAL_UART_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f8a2 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000c0 	.word	0x200000c0
 80006e8:	40008000 	.word	0x40008000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b43      	ldr	r3, [pc, #268]	; (8000810 <MX_GPIO_Init+0x124>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a42      	ldr	r2, [pc, #264]	; (8000810 <MX_GPIO_Init+0x124>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b40      	ldr	r3, [pc, #256]	; (8000810 <MX_GPIO_Init+0x124>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	4b3d      	ldr	r3, [pc, #244]	; (8000810 <MX_GPIO_Init+0x124>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a3c      	ldr	r2, [pc, #240]	; (8000810 <MX_GPIO_Init+0x124>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <MX_GPIO_Init+0x124>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_GPIO_Init+0x124>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a36      	ldr	r2, [pc, #216]	; (8000810 <MX_GPIO_Init+0x124>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_GPIO_Init+0x124>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <MX_GPIO_Init+0x124>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a30      	ldr	r2, [pc, #192]	; (8000810 <MX_GPIO_Init+0x124>)
 8000750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_GPIO_Init+0x124>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000762:	f002 fa25 	bl	8002bb0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_GPIO_Init+0x124>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a29      	ldr	r2, [pc, #164]	; (8000810 <MX_GPIO_Init+0x124>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_GPIO_Init+0x124>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000784:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_GPIO_Init+0x128>)
 8000786:	f000 fcc7 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8000790:	4821      	ldr	r0, [pc, #132]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000792:	f000 fcc1 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0x130>)
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	481d      	ldr	r0, [pc, #116]	; (8000820 <MX_GPIO_Init+0x134>)
 80007ac:	f000 fb22 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007b0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_GPIO_Init+0x128>)
 80007ca:	f000 fb13 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80007ce:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_GPIO_Init+0x12c>)
 80007e4:	f000 fb06 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80007e8:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_GPIO_Init+0x12c>)
 8000802:	f000 faf7 	bl	8000df4 <HAL_GPIO_Init>

}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	48000400 	.word	0x48000400
 8000818:	48001800 	.word	0x48001800
 800081c:	10110000 	.word	0x10110000
 8000820:	48000800 	.word	0x48000800

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6613      	str	r3, [r2, #96]	; 0x60
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6593      	str	r3, [r2, #88]	; 0x58
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <HAL_UART_MspInit+0x80>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12a      	bne.n	80008f4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x84>)
 80008a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x84>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x84>)
 80008ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_UART_MspInit+0x84>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <HAL_UART_MspInit+0x84>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_UART_MspInit+0x84>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80008ce:	f002 f96f 	bl	8002bb0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008e4:	2308      	movs	r3, #8
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008f0:	f000 fa80 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40008000 	.word	0x40008000
 8000900:	40021000 	.word	0x40021000
 8000904:	48001800 	.word	0x48001800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f8f6 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <OTG_FS_IRQHandler+0x10>)
 800096a:	f000 fe93 	bl	8001694 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200005ec 	.word	0x200005ec

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f008 fc94 	bl	80092d4 <__errno>
 80009ac:	4602      	mov	r2, r0
 80009ae:	230c      	movs	r3, #12
 80009b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20050000 	.word	0x20050000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	200000ac 	.word	0x200000ac
 80009e0:	200008b8 	.word	0x200008b8

080009e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <SystemInit+0x64>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <SystemInit+0x64>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0x68>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <SystemInit+0x68>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <SystemInit+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <SystemInit+0x68>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <SystemInit+0x68>)
 8000a10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <SystemInit+0x68>)
 8000a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <SystemInit+0x68>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <SystemInit+0x68>)
 8000a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <SystemInit+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SystemInit+0x64>)
 8000a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00
 8000a4c:	40021000 	.word	0x40021000

08000a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a54:	f7ff ffc6 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a64:	480a      	ldr	r0, [pc, #40]	; (8000a90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
	ldr	r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <LoopForever+0x16>)
	cmp	r2, r3
 8000a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f008 fc2f 	bl	80092e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a82:	f7ff fd3b 	bl	80004fc <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a88:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8000a8c:	08009554 	.word	0x08009554
	ldr	r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a94:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 8000a98:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 8000a9c:	200008b4 	.word	0x200008b4

08000aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_2_IRQHandler>

08000aa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f95f 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f80e 	bl	8000ad4 <HAL_InitTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	e001      	b.n	8000ac8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac4:	f7ff feb6 	bl	8000834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_InitTick+0x6c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d023      	beq.n	8000b30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_InitTick+0x70>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0x6c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f96b 	bl	8000dda <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10f      	bne.n	8000b2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d809      	bhi.n	8000b24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 f935 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_InitTick+0x74>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e007      	b.n	8000b34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e004      	b.n	8000b34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	e001      	b.n	8000b34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000140 	.word	0x20000140

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000140 	.word	0x20000140

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_Delay+0x40>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	db0b      	blt.n	8000c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 021f 	and.w	r2, r3, #31
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <__NVIC_EnableIRQ+0x38>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	2001      	movs	r0, #1
 8000c56:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff29 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff3e 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff31 	bl	8000c34 <__NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffa2 	bl	8000d2c <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e02:	e166      	b.n	80010d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 8158 	beq.w	80010cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d00b      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e30:	2b11      	cmp	r3, #17
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b12      	cmp	r3, #18
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0xea>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b12      	cmp	r3, #18
 8000edc:	d123      	bne.n	8000f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	6939      	ldr	r1, [r7, #16]
 8000f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0203 	and.w	r2, r3, #3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80b2 	beq.w	80010cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f68:	4b61      	ldr	r3, [pc, #388]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6c:	4a60      	ldr	r2, [pc, #384]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6613      	str	r3, [r2, #96]	; 0x60
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f80:	4a5c      	ldr	r2, [pc, #368]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000faa:	d02b      	beq.n	8001004 <HAL_GPIO_Init+0x210>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d025      	beq.n	8001000 <HAL_GPIO_Init+0x20c>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a51      	ldr	r2, [pc, #324]	; (80010fc <HAL_GPIO_Init+0x308>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d01f      	beq.n	8000ffc <HAL_GPIO_Init+0x208>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a50      	ldr	r2, [pc, #320]	; (8001100 <HAL_GPIO_Init+0x30c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d019      	beq.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4f      	ldr	r2, [pc, #316]	; (8001104 <HAL_GPIO_Init+0x310>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d013      	beq.n	8000ff4 <HAL_GPIO_Init+0x200>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <HAL_GPIO_Init+0x314>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_GPIO_Init+0x1fc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_GPIO_Init+0x318>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_Init+0x1f8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x31c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_GPIO_Init+0x1f4>
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	e00e      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000fe8:	2308      	movs	r3, #8
 8000fea:	e00c      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000fec:	2306      	movs	r3, #6
 8000fee:	e00a      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	e008      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e006      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e004      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8001004:	2300      	movs	r3, #0
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	f002 0203 	and.w	r2, r2, #3
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	4093      	lsls	r3, r2
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001016:	4937      	ldr	r1, [pc, #220]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_GPIO_Init+0x320>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001048:	4a32      	ldr	r2, [pc, #200]	; (8001114 <HAL_GPIO_Init+0x320>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_GPIO_Init+0x320>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001072:	4a28      	ldr	r2, [pc, #160]	; (8001114 <HAL_GPIO_Init+0x320>)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x320>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_GPIO_Init+0x320>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_GPIO_Init+0x320>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_GPIO_Init+0x320>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3301      	adds	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f47f ae91 	bne.w	8000e04 <HAL_GPIO_Init+0x10>
  }
}
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000
 80010f8:	48000400 	.word	0x48000400
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000c00 	.word	0x48000c00
 8001104:	48001000 	.word	0x48001000
 8001108:	48001400 	.word	0x48001400
 800110c:	48001800 	.word	0x48001800
 8001110:	48001c00 	.word	0x48001c00
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4013      	ands	r3, r2
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43d9      	mvns	r1, r3
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	400b      	ands	r3, r1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	b08f      	sub	sp, #60	; 0x3c
 8001180:	af0a      	add	r7, sp, #40	; 0x28
 8001182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e054      	b.n	8001238 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f007 fdf7 	bl	8008d9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fd2c 	bl	8004c2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	687e      	ldr	r6, [r7, #4]
 80011da:	466d      	mov	r5, sp
 80011dc:	f106 0410 	add.w	r4, r6, #16
 80011e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80011f0:	1d33      	adds	r3, r6, #4
 80011f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f003 fcb5 	bl	8004b64 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2101      	movs	r1, #1
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fd23 	bl	8004c4c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	687e      	ldr	r6, [r7, #4]
 800120e:	466d      	mov	r5, sp
 8001210:	f106 0410 	add.w	r4, r6, #16
 8001214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001220:	e885 0003 	stmia.w	r5, {r0, r1}
 8001224:	1d33      	adds	r3, r6, #4
 8001226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f003 fe31 	bl	8004e90 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001240 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af04      	add	r7, sp, #16
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	70fb      	strb	r3, [r7, #3]
 8001252:	460b      	mov	r3, r1
 8001254:	70bb      	strb	r3, [r7, #2]
 8001256:	4613      	mov	r3, r2
 8001258:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_HCD_HC_Init+0x28>
 8001264:	2302      	movs	r3, #2
 8001266:	e07f      	b.n	8001368 <HAL_HCD_HC_Init+0x128>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001270:	78fa      	ldrb	r2, [r7, #3]
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	333d      	adds	r3, #61	; 0x3d
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001284:	78fa      	ldrb	r2, [r7, #3]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3338      	adds	r3, #56	; 0x38
 8001294:	787a      	ldrb	r2, [r7, #1]
 8001296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3340      	adds	r3, #64	; 0x40
 80012a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3339      	adds	r3, #57	; 0x39
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80012c0:	78fa      	ldrb	r2, [r7, #3]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	333f      	adds	r3, #63	; 0x3f
 80012d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80012d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	78bb      	ldrb	r3, [r7, #2]
 80012da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012de:	b2d8      	uxtb	r0, r3
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	440b      	add	r3, r1
 80012ec:	333a      	adds	r3, #58	; 0x3a
 80012ee:	4602      	mov	r2, r0
 80012f0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80012f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da0a      	bge.n	8001310 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80012fa:	78fa      	ldrb	r2, [r7, #3]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	440b      	add	r3, r1
 8001308:	333b      	adds	r3, #59	; 0x3b
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e009      	b.n	8001324 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001310:	78fa      	ldrb	r2, [r7, #3]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	333b      	adds	r3, #59	; 0x3b
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001324:	78fa      	ldrb	r2, [r7, #3]
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	333c      	adds	r3, #60	; 0x3c
 8001334:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001338:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	787c      	ldrb	r4, [r7, #1]
 8001340:	78ba      	ldrb	r2, [r7, #2]
 8001342:	78f9      	ldrb	r1, [r7, #3]
 8001344:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	4623      	mov	r3, r4
 8001356:	f003 fedf 	bl	8005118 <USB_HC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_HCD_HC_Halt+0x1e>
 800138a:	2302      	movs	r3, #2
 800138c:	e00f      	b.n	80013ae <HAL_HCD_HC_Halt+0x3e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	78fa      	ldrb	r2, [r7, #3]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f8bd 	bl	800551e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	70fb      	strb	r3, [r7, #3]
 80013ca:	460b      	mov	r3, r1
 80013cc:	70bb      	strb	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80013d2:	78fa      	ldrb	r2, [r7, #3]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	440b      	add	r3, r1
 80013e0:	333b      	adds	r3, #59	; 0x3b
 80013e2:	78ba      	ldrb	r2, [r7, #2]
 80013e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80013e6:	78fa      	ldrb	r2, [r7, #3]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	333f      	adds	r3, #63	; 0x3f
 80013f6:	787a      	ldrb	r2, [r7, #1]
 80013f8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80013fa:	7c3b      	ldrb	r3, [r7, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d114      	bne.n	800142a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001400:	78fa      	ldrb	r2, [r7, #3]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3342      	adds	r3, #66	; 0x42
 8001410:	2203      	movs	r2, #3
 8001412:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	333d      	adds	r3, #61	; 0x3d
 8001424:	7f3a      	ldrb	r2, [r7, #28]
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e009      	b.n	800143e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	3342      	adds	r3, #66	; 0x42
 800143a:	2202      	movs	r2, #2
 800143c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	2b03      	cmp	r3, #3
 8001442:	f200 80d6 	bhi.w	80015f2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001446:	a201      	add	r2, pc, #4	; (adr r2, 800144c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	0800145d 	.word	0x0800145d
 8001450:	080015dd 	.word	0x080015dd
 8001454:	080014c9 	.word	0x080014c9
 8001458:	08001553 	.word	0x08001553
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800145c:	7c3b      	ldrb	r3, [r7, #16]
 800145e:	2b01      	cmp	r3, #1
 8001460:	f040 80c9 	bne.w	80015f6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001464:	78bb      	ldrb	r3, [r7, #2]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f040 80c5 	bne.w	80015f6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800146c:	8b3b      	ldrh	r3, [r7, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	3351      	adds	r3, #81	; 0x51
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001486:	78fa      	ldrb	r2, [r7, #3]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3351      	adds	r3, #81	; 0x51
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10a      	bne.n	80014b2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	3342      	adds	r3, #66	; 0x42
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014b0:	e0a1      	b.n	80015f6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3342      	adds	r3, #66	; 0x42
 80014c2:	2202      	movs	r2, #2
 80014c4:	701a      	strb	r2, [r3, #0]
      break;
 80014c6:	e096      	b.n	80015f6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80014c8:	78bb      	ldrb	r3, [r7, #2]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d120      	bne.n	8001510 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	440b      	add	r3, r1
 80014dc:	3351      	adds	r3, #81	; 0x51
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10a      	bne.n	80014fa <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014e4:	78fa      	ldrb	r2, [r7, #3]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3342      	adds	r3, #66	; 0x42
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80014f8:	e07e      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014fa:	78fa      	ldrb	r2, [r7, #3]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	3342      	adds	r3, #66	; 0x42
 800150a:	2202      	movs	r2, #2
 800150c:	701a      	strb	r2, [r3, #0]
      break;
 800150e:	e073      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	3350      	adds	r3, #80	; 0x50
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001526:	78fa      	ldrb	r2, [r7, #3]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3342      	adds	r3, #66	; 0x42
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
      break;
 800153a:	e05d      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3342      	adds	r3, #66	; 0x42
 800154c:	2202      	movs	r2, #2
 800154e:	701a      	strb	r2, [r3, #0]
      break;
 8001550:	e052      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001552:	78bb      	ldrb	r3, [r7, #2]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d120      	bne.n	800159a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	3351      	adds	r3, #81	; 0x51
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10a      	bne.n	8001584 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3342      	adds	r3, #66	; 0x42
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001582:	e039      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3342      	adds	r3, #66	; 0x42
 8001594:	2202      	movs	r2, #2
 8001596:	701a      	strb	r2, [r3, #0]
      break;
 8001598:	e02e      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	3350      	adds	r3, #80	; 0x50
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10a      	bne.n	80015c6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3342      	adds	r3, #66	; 0x42
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
      break;
 80015c4:	e018      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	3342      	adds	r3, #66	; 0x42
 80015d6:	2202      	movs	r2, #2
 80015d8:	701a      	strb	r2, [r3, #0]
      break;
 80015da:	e00d      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015dc:	78fa      	ldrb	r2, [r7, #3]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3342      	adds	r3, #66	; 0x42
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
      break;
 80015f0:	e002      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80015f2:	bf00      	nop
 80015f4:	e000      	b.n	80015f8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80015f6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80015f8:	78fa      	ldrb	r2, [r7, #3]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	3344      	adds	r3, #68	; 0x44
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800160c:	78fa      	ldrb	r2, [r7, #3]
 800160e:	8b39      	ldrh	r1, [r7, #24]
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4403      	add	r3, r0
 800161c:	3348      	adds	r3, #72	; 0x48
 800161e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	335c      	adds	r3, #92	; 0x5c
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	334c      	adds	r3, #76	; 0x4c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	3339      	adds	r3, #57	; 0x39
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	335d      	adds	r3, #93	; 0x5d
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	3338      	adds	r3, #56	; 0x38
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f003 fe39 	bl	80052fc <USB_HC_StartXfer>
 800168a:	4603      	mov	r3, r0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fbad 	bl	8004e0a <USB_GetMode>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	f040 80ef 	bne.w	8001896 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fb91 	bl	8004de4 <USB_ReadInterrupts>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80e5 	beq.w	8001894 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fb88 	bl	8004de4 <USB_ReadInterrupts>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016de:	d104      	bne.n	80016ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fb78 	bl	8004de4 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016fe:	d104      	bne.n	800170a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001708:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fb68 	bl	8004de4 <USB_ReadInterrupts>
 8001714:	4603      	mov	r3, r0
 8001716:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800171a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800171e:	d104      	bne.n	800172a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001728:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fb58 	bl	8004de4 <USB_ReadInterrupts>
 8001734:	4603      	mov	r3, r0
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b02      	cmp	r3, #2
 800173c:	d103      	bne.n	8001746 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2202      	movs	r2, #2
 8001744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fb4a 	bl	8004de4 <USB_ReadInterrupts>
 8001750:	4603      	mov	r3, r0
 8001752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800175a:	d115      	bne.n	8001788 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001764:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d108      	bne.n	8001788 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f007 fb92 	bl	8008ea0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f003 fc02 	bl	8004f8c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fb29 	bl	8004de4 <USB_ReadInterrupts>
 8001792:	4603      	mov	r3, r0
 8001794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d102      	bne.n	80017a4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f001 f90e 	bl	80029c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fb1b 	bl	8004de4 <USB_ReadInterrupts>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d106      	bne.n	80017c6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f007 fb55 	bl	8008e68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2208      	movs	r2, #8
 80017c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fb0a 	bl	8004de4 <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017da:	d138      	bne.n	800184e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fe8b 	bl	80054fc <USB_HC_ReadInterrupt>
 80017e6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e025      	b.n	800183a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d018      	beq.n	8001834 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001818:	d106      	bne.n	8001828 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f8ba 	bl	800199a <HCD_HC_IN_IRQHandler>
 8001826:	e005      	b.n	8001834 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fcc4 	bl	80021bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	d3d4      	bcc.n	80017ee <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fac6 	bl	8004de4 <USB_ReadInterrupts>
 8001858:	4603      	mov	r3, r0
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b10      	cmp	r3, #16
 8001860:	d101      	bne.n	8001866 <HAL_HCD_IRQHandler+0x1d2>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_HCD_IRQHandler+0x1d4>
 8001866:	2300      	movs	r3, #0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d014      	beq.n	8001896 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0210 	bic.w	r2, r2, #16
 800187a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fff3 	bl	8002868 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0210 	orr.w	r2, r2, #16
 8001890:	619a      	str	r2, [r3, #24]
 8001892:	e000      	b.n	8001896 <HAL_HCD_IRQHandler+0x202>
      return;
 8001894:	bf00      	nop
    }
  }
}
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_HCD_Start+0x16>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e013      	b.n	80018da <HAL_HCD_Start+0x3e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 f9a2 	bl	8004c08 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fbc2 	bl	8005054 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_HCD_Stop+0x16>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e00d      	b.n	8001914 <HAL_HCD_Stop+0x32>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f003 ff09 	bl	800571c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fb69 	bl	8005000 <USB_ResetPort>
 800192e:	4603      	mov	r3, r0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	335c      	adds	r3, #92	; 0x5c
 8001954:	781b      	ldrb	r3, [r3, #0]
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fbc0 	bl	80050f4 <USB_GetCurrentFrame>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fb9b 	bl	80050c6 <USB_GetHostSpeed>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d119      	bne.n	80019fe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d6:	461a      	mov	r2, r3
 80019d8:	2304      	movs	r3, #4
 80019da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	0151      	lsls	r1, r2, #5
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	440a      	add	r2, r1
 80019f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	60d3      	str	r3, [r2, #12]
 80019fc:	e0ce      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	015a      	lsls	r2, r3, #5
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a14:	d12c      	bne.n	8001a70 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	461a      	mov	r2, r3
 8001a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	335d      	adds	r3, #93	; 0x5d
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	0151      	lsls	r1, r2, #5
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	440a      	add	r2, r1
 8001a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fd58 	bl	800551e <USB_HC_Halt>
 8001a6e:	e095      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	015a      	lsls	r2, r3, #5
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d109      	bne.n	8001a9a <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a92:	461a      	mov	r2, r3
 8001a94:	2320      	movs	r3, #32
 8001a96:	6093      	str	r3, [r2, #8]
 8001a98:	e080      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	015a      	lsls	r2, r3, #5
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d134      	bne.n	8001b1a <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	0151      	lsls	r1, r2, #5
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	440a      	add	r2, r1
 8001ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	335d      	adds	r3, #93	; 0x5d
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af0:	461a      	mov	r2, r3
 8001af2:	2310      	movs	r3, #16
 8001af4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b02:	461a      	mov	r2, r3
 8001b04:	2308      	movs	r3, #8
 8001b06:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fd03 	bl	800551e <USB_HC_Halt>
 8001b18:	e040      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	d134      	bne.n	8001b9c <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	0151      	lsls	r1, r2, #5
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	440a      	add	r2, r1
 8001b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fcde 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2310      	movs	r3, #16
 8001b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	335d      	adds	r3, #93	; 0x5d
 8001b84:	2208      	movs	r2, #8
 8001b86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	015a      	lsls	r2, r3, #5
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b94:	461a      	mov	r2, r3
 8001b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb2:	d122      	bne.n	8001bfa <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	0151      	lsls	r1, r2, #5
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	440a      	add	r2, r1
 8001bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fc9d 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	015a      	lsls	r2, r3, #5
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001bf8:	e2dc      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	015a      	lsls	r2, r3, #5
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	f040 80dd 	bne.w	8001dcc <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	335d      	adds	r3, #93	; 0x5d
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3358      	adds	r3, #88	; 0x58
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	461a      	mov	r2, r3
 8001c48:	2301      	movs	r3, #1
 8001c4a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	333f      	adds	r3, #63	; 0x3f
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	333f      	adds	r3, #63	; 0x3f
 8001c72:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d121      	bne.n	8001cbc <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	0151      	lsls	r1, r2, #5
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	440a      	add	r2, r1
 8001c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fc3b 	bl	800551e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	6093      	str	r3, [r2, #8]
 8001cba:	e070      	b.n	8001d9e <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	333f      	adds	r3, #63	; 0x3f
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d12a      	bne.n	8001d28 <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	0151      	lsls	r1, r2, #5
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	440a      	add	r2, r1
 8001ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cf0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	335c      	adds	r3, #92	; 0x5c
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	b2d8      	uxtb	r0, r3
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	335c      	adds	r3, #92	; 0x5c
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4601      	mov	r1, r0
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f007 f8cb 	bl	8008ebc <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d26:	e03a      	b.n	8001d9e <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	333f      	adds	r3, #63	; 0x3f
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12f      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	335c      	adds	r3, #92	; 0x5c
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	3350      	adds	r3, #80	; 0x50
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2d8      	uxtb	r0, r3
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	3350      	adds	r3, #80	; 0x50
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	b2d8      	uxtb	r0, r3
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	335c      	adds	r3, #92	; 0x5c
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4601      	mov	r1, r0
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f007 f88f 	bl	8008ebc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	3350      	adds	r3, #80	; 0x50
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f083 0301 	eor.w	r3, r3, #1
 8001db4:	b2d8      	uxtb	r0, r3
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3350      	adds	r3, #80	; 0x50
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	701a      	strb	r2, [r3, #0]
}
 8001dca:	e1f3      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	f040 811a 	bne.w	8002018 <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	0151      	lsls	r1, r2, #5
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	440a      	add	r2, r1
 8001dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfe:	f023 0302 	bic.w	r3, r3, #2
 8001e02:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	335d      	adds	r3, #93	; 0x5d
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10a      	bne.n	8001e30 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	335c      	adds	r3, #92	; 0x5c
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e0d9      	b.n	8001fe4 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	335d      	adds	r3, #93	; 0x5d
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d10a      	bne.n	8001e5c <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	335c      	adds	r3, #92	; 0x5c
 8001e56:	2205      	movs	r2, #5
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e0c3      	b.n	8001fe4 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	335d      	adds	r3, #93	; 0x5d
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d00a      	beq.n	8001e88 <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	335d      	adds	r3, #93	; 0x5d
 8001e82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d156      	bne.n	8001f36 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3358      	adds	r3, #88	; 0x58
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	1c59      	adds	r1, r3, #1
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4403      	add	r3, r0
 8001eaa:	3358      	adds	r3, #88	; 0x58
 8001eac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	3358      	adds	r3, #88	; 0x58
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d914      	bls.n	8001eee <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3358      	adds	r3, #88	; 0x58
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	335c      	adds	r3, #92	; 0x5c
 8001ee8:	2204      	movs	r2, #4
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e009      	b.n	8001f02 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	335c      	adds	r3, #92	; 0x5c
 8001efe:	2202      	movs	r2, #2
 8001f00:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f18:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f20:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e056      	b.n	8001fe4 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	335d      	adds	r3, #93	; 0x5d
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d123      	bne.n	8001f94 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	335c      	adds	r3, #92	; 0x5c
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f76:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f7e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e027      	b.n	8001fe4 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	335d      	adds	r3, #93	; 0x5d
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b07      	cmp	r3, #7
 8001fa8:	d11c      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3358      	adds	r3, #88	; 0x58
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	1c59      	adds	r1, r3, #1
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4403      	add	r3, r0
 8001fcc:	3358      	adds	r3, #88	; 0x58
 8001fce:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	335c      	adds	r3, #92	; 0x5c
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	b2d8      	uxtb	r0, r3
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	335c      	adds	r3, #92	; 0x5c
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4601      	mov	r1, r0
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f006 ff53 	bl	8008ebc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002016:	e0cd      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b80      	cmp	r3, #128	; 0x80
 800202c:	d13e      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	0151      	lsls	r1, r2, #5
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	440a      	add	r2, r1
 8002044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	3358      	adds	r3, #88	; 0x58
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	1c59      	adds	r1, r3, #1
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4403      	add	r3, r0
 8002070:	3358      	adds	r3, #88	; 0x58
 8002072:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	335d      	adds	r3, #93	; 0x5d
 8002084:	2206      	movs	r2, #6
 8002086:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fa43 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	461a      	mov	r2, r3
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	6093      	str	r3, [r2, #8]
}
 80020aa:	e083      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d178      	bne.n	80021b4 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	333f      	adds	r3, #63	; 0x3f
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d122      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	3358      	adds	r3, #88	; 0x58
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	0151      	lsls	r1, r2, #5
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	440a      	add	r2, r1
 8002102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fa01 	bl	800551e <USB_HC_Halt>
 800211c:	e041      	b.n	80021a2 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	333f      	adds	r3, #63	; 0x3f
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	333f      	adds	r3, #63	; 0x3f
 8002144:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002146:	2b02      	cmp	r3, #2
 8002148:	d12b      	bne.n	80021a2 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3358      	adds	r3, #88	; 0x58
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	335d      	adds	r3, #93	; 0x5d
 800216e:	2203      	movs	r2, #3
 8002170:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	0151      	lsls	r1, r2, #5
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	440a      	add	r2, r1
 8002188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f003 f9be 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	461a      	mov	r2, r3
 80021b0:	2310      	movs	r3, #16
 80021b2:	6093      	str	r3, [r2, #8]
}
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d119      	bne.n	8002220 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	2304      	movs	r3, #4
 80021fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	0151      	lsls	r1, r2, #5
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	440a      	add	r2, r1
 8002214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800221e:	e31e      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b20      	cmp	r3, #32
 8002234:	d141      	bne.n	80022ba <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	461a      	mov	r2, r3
 8002244:	2320      	movs	r3, #32
 8002246:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	333d      	adds	r3, #61	; 0x3d
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b01      	cmp	r3, #1
 800225c:	f040 82ff 	bne.w	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	333d      	adds	r3, #61	; 0x3d
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	335c      	adds	r3, #92	; 0x5c
 8002284:	2202      	movs	r2, #2
 8002286:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	0151      	lsls	r1, r2, #5
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	440a      	add	r2, r1
 800229e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 f933 	bl	800551e <USB_HC_Halt>
}
 80022b8:	e2d1      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d13f      	bne.n	8002350 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	335d      	adds	r3, #93	; 0x5d
 80022e0:	2204      	movs	r2, #4
 80022e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	333d      	adds	r3, #61	; 0x3d
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	3358      	adds	r3, #88	; 0x58
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	0151      	lsls	r1, r2, #5
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	440a      	add	r2, r1
 8002322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f003 f8f1 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	461a      	mov	r2, r3
 800234a:	2340      	movs	r3, #64	; 0x40
 800234c:	6093      	str	r3, [r2, #8]
}
 800234e:	e286      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002366:	d122      	bne.n	80023ae <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	0151      	lsls	r1, r2, #5
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	440a      	add	r2, r1
 800237e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f003 f8c3 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023aa:	6093      	str	r3, [r2, #8]
}
 80023ac:	e257      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d135      	bne.n	8002430 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	3358      	adds	r3, #88	; 0x58
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	0151      	lsls	r1, r2, #5
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	440a      	add	r2, r1
 80023ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f003 f88b 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2301      	movs	r3, #1
 8002418:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	335d      	adds	r3, #93	; 0x5d
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	e216      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b08      	cmp	r3, #8
 8002444:	d12b      	bne.n	800249e <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	2308      	movs	r3, #8
 8002456:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	0151      	lsls	r1, r2, #5
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	440a      	add	r2, r1
 800246e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f003 f84b 	bl	800551e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	335d      	adds	r3, #93	; 0x5d
 8002498:	2205      	movs	r2, #5
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	e1df      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b10      	cmp	r3, #16
 80024b2:	d135      	bne.n	8002520 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3358      	adds	r3, #88	; 0x58
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	335d      	adds	r3, #93	; 0x5d
 80024d8:	2203      	movs	r2, #3
 80024da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	0151      	lsls	r1, r2, #5
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	440a      	add	r2, r1
 80024f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f6:	f043 0302 	orr.w	r3, r3, #2
 80024fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f003 f809 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002518:	461a      	mov	r2, r3
 800251a:	2310      	movs	r3, #16
 800251c:	6093      	str	r3, [r2, #8]
}
 800251e:	e19e      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d12b      	bne.n	800258e <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	0151      	lsls	r1, r2, #5
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	440a      	add	r2, r1
 800254c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f002 ffdc 	bl	800551e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	440b      	add	r3, r1
 8002574:	335d      	adds	r3, #93	; 0x5d
 8002576:	2206      	movs	r2, #6
 8002578:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	461a      	mov	r2, r3
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	6093      	str	r3, [r2, #8]
}
 800258c:	e167      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d135      	bne.n	8002612 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	0151      	lsls	r1, r2, #5
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	440a      	add	r2, r1
 80025bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 ffa4 	bl	800551e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	461a      	mov	r2, r3
 80025e4:	2310      	movs	r3, #16
 80025e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	461a      	mov	r2, r3
 80025f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	335d      	adds	r3, #93	; 0x5d
 800260c:	2208      	movs	r2, #8
 800260e:	701a      	strb	r2, [r3, #0]
}
 8002610:	e125      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	f040 811a 	bne.w	800285e <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	0151      	lsls	r1, r2, #5
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	440a      	add	r2, r1
 8002640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002644:	f023 0302 	bic.w	r3, r3, #2
 8002648:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	335d      	adds	r3, #93	; 0x5d
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d137      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	440b      	add	r3, r1
 800266e:	335c      	adds	r3, #92	; 0x5c
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	333f      	adds	r3, #63	; 0x3f
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d00b      	beq.n	80026a2 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	333f      	adds	r3, #63	; 0x3f
 800269a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800269c:	2b03      	cmp	r3, #3
 800269e:	f040 80c5 	bne.w	800282c <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	3351      	adds	r3, #81	; 0x51
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2d8      	uxtb	r0, r3
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	3351      	adds	r3, #81	; 0x51
 80026ca:	4602      	mov	r2, r0
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e0ad      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	335d      	adds	r3, #93	; 0x5d
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d10a      	bne.n	80026fc <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	335c      	adds	r3, #92	; 0x5c
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e097      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	335d      	adds	r3, #93	; 0x5d
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d10a      	bne.n	8002728 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	335c      	adds	r3, #92	; 0x5c
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e081      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	335d      	adds	r3, #93	; 0x5d
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b05      	cmp	r3, #5
 800273c:	d10a      	bne.n	8002754 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	335c      	adds	r3, #92	; 0x5c
 800274e:	2205      	movs	r2, #5
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e06b      	b.n	800282c <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	335d      	adds	r3, #93	; 0x5d
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b06      	cmp	r3, #6
 8002768:	d00a      	beq.n	8002780 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	335d      	adds	r3, #93	; 0x5d
 800277a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800277c:	2b08      	cmp	r3, #8
 800277e:	d155      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	3358      	adds	r3, #88	; 0x58
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1c59      	adds	r1, r3, #1
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4403      	add	r3, r0
 80027a2:	3358      	adds	r3, #88	; 0x58
 80027a4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	3358      	adds	r3, #88	; 0x58
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d914      	bls.n	80027e6 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	3358      	adds	r3, #88	; 0x58
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	335c      	adds	r3, #92	; 0x5c
 80027e0:	2204      	movs	r2, #4
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e009      	b.n	80027fa <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	335c      	adds	r3, #92	; 0x5c
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002810:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002818:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	2302      	movs	r3, #2
 800283c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	b2d8      	uxtb	r0, r3
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	335c      	adds	r3, #92	; 0x5c
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4601      	mov	r1, r0
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f006 fb2f 	bl	8008ebc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	0c5b      	lsrs	r3, r3, #17
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800289c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d003      	beq.n	80028ac <HCD_RXQLVL_IRQHandler+0x44>
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	f000 8082 	beq.w	80029ae <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028aa:	e083      	b.n	80029b4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d07f      	beq.n	80029b2 <HCD_RXQLVL_IRQHandler+0x14a>
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	3344      	adds	r3, #68	; 0x44
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d074      	beq.n	80029b2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	3344      	adds	r3, #68	; 0x44
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	b292      	uxth	r2, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f002 fa55 	bl	8004d92 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	3344      	adds	r3, #68	; 0x44
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	18d1      	adds	r1, r2, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4403      	add	r3, r0
 800290c:	3344      	adds	r3, #68	; 0x44
 800290e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	440b      	add	r3, r1
 800291e:	334c      	adds	r3, #76	; 0x4c
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	18d1      	adds	r1, r2, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4403      	add	r3, r0
 8002934:	334c      	adds	r3, #76	; 0x4c
 8002936:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HCD_RXQLVL_IRQHandler+0x154>)
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d031      	beq.n	80029b2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002964:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800296c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	3350      	adds	r3, #80	; 0x50
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	f083 0301 	eor.w	r3, r3, #1
 8002996:	b2d8      	uxtb	r0, r3
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	3350      	adds	r3, #80	; 0x50
 80029a8:	4602      	mov	r2, r0
 80029aa:	701a      	strb	r2, [r3, #0]
      break;
 80029ac:	e001      	b.n	80029b2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80029ae:	bf00      	nop
 80029b0:	e000      	b.n	80029b4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80029b2:	bf00      	nop
  }
}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	1ff80000 	.word	0x1ff80000

080029c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d10b      	bne.n	8002a10 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d102      	bne.n	8002a08 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f006 fa3e 	bl	8008e84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f043 0302 	orr.w	r3, r3, #2
 8002a0e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d132      	bne.n	8002a80 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f043 0308 	orr.w	r3, r3, #8
 8002a20:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d126      	bne.n	8002a7a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d113      	bne.n	8002a5c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a3e:	d106      	bne.n	8002a4e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2102      	movs	r1, #2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 faa0 	bl	8004f8c <USB_InitFSLSPClkSel>
 8002a4c:	e011      	b.n	8002a72 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2101      	movs	r1, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fa99 	bl	8004f8c <USB_InitFSLSPClkSel>
 8002a5a:	e00a      	b.n	8002a72 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d106      	bne.n	8002a72 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a70:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f006 fa30 	bl	8008ed8 <HAL_HCD_PortEnabled_Callback>
 8002a78:	e002      	b.n	8002a80 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f006 fa3a 	bl	8008ef4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d103      	bne.n	8002a92 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f043 0320 	orr.w	r3, r3, #32
 8002a90:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6013      	str	r3, [r2, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6013      	str	r3, [r2, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40007000 	.word	0x40007000

08002ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40007000 	.word	0x40007000

08002ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af2:	d130      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b00:	d038      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2232      	movs	r2, #50	; 0x32
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	3301      	adds	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b28:	e002      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3c:	d102      	bne.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f2      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b50:	d110      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e00f      	b.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d007      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b6c:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40007000 	.word	0x40007000
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9e:	6053      	str	r3, [r2, #4]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40007000 	.word	0x40007000

08002bb0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_PWREx_EnableVddIO2+0x1c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_PWREx_EnableVddIO2+0x1c>)
 8002bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bbe:	6053      	str	r3, [r2, #4]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40007000 	.word	0x40007000

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f000 bc16 	b.w	8003410 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be4:	4ba0      	ldr	r3, [pc, #640]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bee:	4b9e      	ldr	r3, [pc, #632]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80e4 	beq.w	8002dce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4c>
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	f040 808b 	bne.w	8002d2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 8087 	bne.w	8002d2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c1c:	4b92      	ldr	r3, [pc, #584]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x64>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e3ed      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	4b8b      	ldr	r3, [pc, #556]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_RCC_OscConfig+0x7e>
 8002c44:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4c:	e005      	b.n	8002c5a <HAL_RCC_OscConfig+0x8a>
 8002c4e:	4b86      	ldr	r3, [pc, #536]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d223      	bcs.n	8002ca6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fd7e 	bl	8003764 <RCC_SetFlashLatencyFromMSIRange>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e3ce      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c72:	4b7d      	ldr	r3, [pc, #500]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7c      	ldr	r2, [pc, #496]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c78:	f043 0308 	orr.w	r3, r3, #8
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b7a      	ldr	r3, [pc, #488]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4977      	ldr	r1, [pc, #476]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c90:	4b75      	ldr	r3, [pc, #468]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	4972      	ldr	r1, [pc, #456]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
 8002ca4:	e025      	b.n	8002cf2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca6:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6f      	ldr	r2, [pc, #444]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	496a      	ldr	r1, [pc, #424]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc4:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	4965      	ldr	r1, [pc, #404]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fd3e 	bl	8003764 <RCC_SetFlashLatencyFromMSIRange>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e38e      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cf2:	f000 fc75 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	4a5a      	ldr	r2, [pc, #360]	; (8002e6c <HAL_RCC_OscConfig+0x29c>)
 8002d04:	5cd3      	ldrb	r3, [r2, r3]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d0e:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <HAL_RCC_OscConfig+0x2a0>)
 8002d10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_OscConfig+0x2a4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fedc 	bl	8000ad4 <HAL_InitTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d052      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	e372      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d032      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d32:	4b4d      	ldr	r3, [pc, #308]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a4c      	ldr	r2, [pc, #304]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d3e:	f7fd ff19 	bl	8000b74 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d46:	f7fd ff15 	bl	8000b74 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e35b      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d58:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d64:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3f      	ldr	r2, [pc, #252]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d6a:	f043 0308 	orr.w	r3, r3, #8
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	493a      	ldr	r1, [pc, #232]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	4935      	ldr	r1, [pc, #212]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
 8002d96:	e01a      	b.n	8002dce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d98:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a32      	ldr	r2, [pc, #200]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002da4:	f7fd fee6 	bl	8000b74 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dac:	f7fd fee2 	bl	8000b74 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e328      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1dc>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d073      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_OscConfig+0x21c>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d10e      	bne.n	8002e04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d063      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d15f      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e305      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCC_OscConfig+0x24c>
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e01d      	b.n	8002e58 <HAL_RCC_OscConfig+0x288>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x270>
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0x288>
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <HAL_RCC_OscConfig+0x298>)
 8002e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fd fe88 	bl	8000b74 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e66:	e010      	b.n	8002e8a <HAL_RCC_OscConfig+0x2ba>
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	080094fc 	.word	0x080094fc
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fd fe7c 	bl	8000b74 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e2c2      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	4baf      	ldr	r3, [pc, #700]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x2a8>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fd fe6c 	bl	8000b74 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fd fe68 	bl	8000b74 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e2ae      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	4ba5      	ldr	r3, [pc, #660]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2d0>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d060      	beq.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x310>
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d116      	bne.n	8002f0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee0:	4b99      	ldr	r3, [pc, #612]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x328>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e28b      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b93      	ldr	r3, [pc, #588]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	4990      	ldr	r1, [pc, #576]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f0c:	e040      	b.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d023      	beq.n	8002f5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f16:	4b8c      	ldr	r3, [pc, #560]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a8b      	ldr	r2, [pc, #556]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fd fe27 	bl	8000b74 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fd fe23 	bl	8000b74 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e269      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f3c:	4b82      	ldr	r3, [pc, #520]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	497c      	ldr	r1, [pc, #496]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
 8002f5c:	e018      	b.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b7a      	ldr	r3, [pc, #488]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a79      	ldr	r2, [pc, #484]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fd fe03 	bl	8000b74 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fd fdff 	bl	8000b74 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e245      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f84:	4b70      	ldr	r3, [pc, #448]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d03c      	beq.n	8003016 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01c      	beq.n	8002fde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa4:	4b68      	ldr	r3, [pc, #416]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002faa:	4a67      	ldr	r2, [pc, #412]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fd fdde 	bl	8000b74 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fd fdda 	bl	8000b74 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e220      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fce:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <HAL_RCC_OscConfig+0x3ec>
 8002fdc:	e01b      	b.n	8003016 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fde:	4b5a      	ldr	r3, [pc, #360]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe4:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fd fdc1 	bl	8000b74 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7fd fdbd 	bl	8000b74 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e203      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003008:	4b4f      	ldr	r3, [pc, #316]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ef      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80a6 	beq.w	8003170 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003024:	2300      	movs	r3, #0
 8003026:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003028:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003034:	4b44      	ldr	r3, [pc, #272]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	4a43      	ldr	r2, [pc, #268]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 800303a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303e:	6593      	str	r3, [r2, #88]	; 0x58
 8003040:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304c:	2301      	movs	r3, #1
 800304e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003050:	4b3e      	ldr	r3, [pc, #248]	; (800314c <HAL_RCC_OscConfig+0x57c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d118      	bne.n	800308e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800305c:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_RCC_OscConfig+0x57c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3a      	ldr	r2, [pc, #232]	; (800314c <HAL_RCC_OscConfig+0x57c>)
 8003062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003066:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003068:	f7fd fd84 	bl	8000b74 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003070:	f7fd fd80 	bl	8000b74 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1c6      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003082:	4b32      	ldr	r3, [pc, #200]	; (800314c <HAL_RCC_OscConfig+0x57c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d108      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4d8>
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a6:	e024      	b.n	80030f2 <HAL_RCC_OscConfig+0x522>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d110      	bne.n	80030d2 <HAL_RCC_OscConfig+0x502>
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a24      	ldr	r2, [pc, #144]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	4a20      	ldr	r2, [pc, #128]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d0:	e00f      	b.n	80030f2 <HAL_RCC_OscConfig+0x522>
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	4a17      	ldr	r2, [pc, #92]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 80030ea:	f023 0304 	bic.w	r3, r3, #4
 80030ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7fd fd3b 	bl	8000b74 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fd fd37 	bl	8000b74 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e17b      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x578>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ed      	beq.n	8003102 <HAL_RCC_OscConfig+0x532>
 8003126:	e01a      	b.n	800315e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fd fd24 	bl	8000b74 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800312e:	e00f      	b.n	8003150 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fd fd20 	bl	8000b74 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d906      	bls.n	8003150 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e164      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003150:	4ba8      	ldr	r3, [pc, #672]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e8      	bne.n	8003130 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800315e:	7ffb      	ldrb	r3, [r7, #31]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003164:	4ba3      	ldr	r3, [pc, #652]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	4aa2      	ldr	r2, [pc, #648]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 800316a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03c      	beq.n	80031f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01c      	beq.n	80031be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003184:	4b9b      	ldr	r3, [pc, #620]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318a:	4a9a      	ldr	r2, [pc, #616]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fd fcee 	bl	8000b74 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800319c:	f7fd fcea 	bl	8000b74 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e130      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ae:	4b91      	ldr	r3, [pc, #580]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80031b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ef      	beq.n	800319c <HAL_RCC_OscConfig+0x5cc>
 80031bc:	e01b      	b.n	80031f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031be:	4b8d      	ldr	r3, [pc, #564]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80031c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031c4:	4a8b      	ldr	r2, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fd fcd1 	bl	8000b74 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d6:	f7fd fccd 	bl	8000b74 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e113      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031e8:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80031ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1ef      	bne.n	80031d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8107 	beq.w	800340e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	2b02      	cmp	r3, #2
 8003206:	f040 80cb 	bne.w	80033a0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800320a:	4b7a      	ldr	r3, [pc, #488]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f003 0203 	and.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321a:	429a      	cmp	r2, r3
 800321c:	d12c      	bne.n	8003278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	3b01      	subs	r3, #1
 800322a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d123      	bne.n	8003278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d11b      	bne.n	8003278 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d113      	bne.n	8003278 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d109      	bne.n	8003278 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	3b01      	subs	r3, #1
 8003272:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d06d      	beq.n	8003354 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d068      	beq.n	8003350 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800327e:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800328a:	4b5a      	ldr	r3, [pc, #360]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0ba      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800329a:	4b56      	ldr	r3, [pc, #344]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a55      	ldr	r2, [pc, #340]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80032a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032a6:	f7fd fc65 	bl	8000b74 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fd fc61 	bl	8000b74 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0a7      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c0:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HAL_RCC_OscConfig+0x828>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032dc:	3a01      	subs	r2, #1
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	4311      	orrs	r1, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032e6:	0212      	lsls	r2, r2, #8
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ee:	0852      	lsrs	r2, r2, #1
 80032f0:	3a01      	subs	r2, #1
 80032f2:	0552      	lsls	r2, r2, #21
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032fa:	0852      	lsrs	r2, r2, #1
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0652      	lsls	r2, r2, #25
 8003300:	4311      	orrs	r1, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003306:	06d2      	lsls	r2, r2, #27
 8003308:	430a      	orrs	r2, r1
 800330a:	493a      	ldr	r1, [pc, #232]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 800330c:	4313      	orrs	r3, r2
 800330e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003310:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a37      	ldr	r2, [pc, #220]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800331c:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a34      	ldr	r2, [pc, #208]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003326:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003328:	f7fd fc24 	bl	8000b74 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fc20 	bl	8000b74 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e066      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800334e:	e05e      	b.n	800340e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e05d      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d156      	bne.n	800340e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a20      	ldr	r2, [pc, #128]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003376:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003378:	f7fd fbfc 	bl	8000b74 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd fbf8 	bl	8000b74 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e03e      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x7b0>
 800339e:	e036      	b.n	800340e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d031      	beq.n	800340a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80033ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	4a0c      	ldr	r2, [pc, #48]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80033c4:	f023 0303 	bic.w	r3, r3, #3
 80033c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_RCC_OscConfig+0x824>)
 80033d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fd fbcb 	bl	8000b74 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e0:	e00c      	b.n	80033fc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fd fbc7 	bl	8000b74 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d905      	bls.n	80033fc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e00d      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
 80033f4:	40021000 	.word	0x40021000
 80033f8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_OscConfig+0x848>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ec      	bne.n	80033e2 <HAL_RCC_OscConfig+0x812>
 8003408:	e001      	b.n	800340e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000

0800341c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0c8      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCC_ClockConfig+0x1b0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d910      	bls.n	8003460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_ClockConfig+0x1b0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 0207 	bic.w	r2, r3, #7
 8003446:	4961      	ldr	r1, [pc, #388]	; (80035cc <HAL_RCC_ClockConfig+0x1b0>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <HAL_RCC_ClockConfig+0x1b0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b0      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d04c      	beq.n	8003506 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d107      	bne.n	8003484 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003474:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d121      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e09e      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d107      	bne.n	800349c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348c:	4b50      	ldr	r3, [pc, #320]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d115      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e092      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a4:	4b4a      	ldr	r3, [pc, #296]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e086      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b4:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e07e      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c4:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 0203 	bic.w	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	493f      	ldr	r1, [pc, #252]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d6:	f7fd fb4d 	bl	8000b74 <HAL_GetTick>
 80034da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034de:	f7fd fb49 	bl	8000b74 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e066      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 020c 	and.w	r2, r3, #12
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	429a      	cmp	r2, r3
 8003504:	d1eb      	bne.n	80034de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003512:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	492c      	ldr	r1, [pc, #176]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003520:	4313      	orrs	r3, r2
 8003522:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b29      	ldr	r3, [pc, #164]	; (80035cc <HAL_RCC_ClockConfig+0x1b0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d210      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_RCC_ClockConfig+0x1b0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4924      	ldr	r1, [pc, #144]	; (80035cc <HAL_RCC_ClockConfig+0x1b0>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_RCC_ClockConfig+0x1b0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e036      	b.n	80035c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4918      	ldr	r1, [pc, #96]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4910      	ldr	r1, [pc, #64]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003592:	f000 f825 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8003596:	4601      	mov	r1, r0
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_RCC_ClockConfig+0x1b4>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	fa21 f303 	lsr.w	r3, r1, r3
 80035ae:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fa8c 	bl	8000ad4 <HAL_InitTick>
 80035bc:	4603      	mov	r3, r0
 80035be:	72fb      	strb	r3, [r7, #11]

  return status;
 80035c0:	7afb      	ldrb	r3, [r7, #11]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40021000 	.word	0x40021000
 80035d4:	080094fc 	.word	0x080094fc
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ee:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f8:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x34>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d121      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d11e      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003614:	4b33      	ldr	r3, [pc, #204]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003620:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	e005      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003630:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d102      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003658:	4b24      	ldr	r3, [pc, #144]	; (80036ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	e004      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d101      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d133      	bne.n	80036d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d002      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0xa4>
 800367e:	2b03      	cmp	r3, #3
 8003680:	d003      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0xaa>
 8003682:	e005      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003686:	617b      	str	r3, [r7, #20]
      break;
 8003688:	e005      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800368a:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800368c:	617b      	str	r3, [r7, #20]
      break;
 800368e:	e002      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	617b      	str	r3, [r7, #20]
      break;
 8003694:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	3301      	adds	r3, #1
 80036a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	fb02 f203 	mul.w	r2, r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	0e5b      	lsrs	r3, r3, #25
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	3301      	adds	r3, #1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036d6:	69bb      	ldr	r3, [r7, #24]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3724      	adds	r7, #36	; 0x24
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08009514 	.word	0x08009514
 80036ec:	00f42400 	.word	0x00f42400
 80036f0:	007a1200 	.word	0x007a1200

080036f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_RCC_GetHCLKFreq+0x14>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000000 	.word	0x20000000

0800370c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003710:	f7ff fff0 	bl	80036f4 <HAL_RCC_GetHCLKFreq>
 8003714:	4601      	mov	r1, r0
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4a04      	ldr	r2, [pc, #16]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003722:	5cd3      	ldrb	r3, [r2, r3]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa21 f303 	lsr.w	r3, r1, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40021000 	.word	0x40021000
 8003734:	0800950c 	.word	0x0800950c

08003738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800373c:	f7ff ffda 	bl	80036f4 <HAL_RCC_GetHCLKFreq>
 8003740:	4601      	mov	r1, r0
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	0adb      	lsrs	r3, r3, #11
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4a04      	ldr	r2, [pc, #16]	; (8003760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800374e:	5cd3      	ldrb	r3, [r2, r3]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000
 8003760:	0800950c 	.word	0x0800950c

08003764 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003770:	4b2a      	ldr	r3, [pc, #168]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800377c:	f7ff f9a4 	bl	8002ac8 <HAL_PWREx_GetVoltageRange>
 8003780:	6178      	str	r0, [r7, #20]
 8003782:	e014      	b.n	80037ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b25      	ldr	r3, [pc, #148]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	4a24      	ldr	r2, [pc, #144]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	6593      	str	r3, [r2, #88]	; 0x58
 8003790:	4b22      	ldr	r3, [pc, #136]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800379c:	f7ff f994 	bl	8002ac8 <HAL_PWREx_GetVoltageRange>
 80037a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4a1d      	ldr	r2, [pc, #116]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b4:	d10b      	bne.n	80037ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d919      	bls.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2ba0      	cmp	r3, #160	; 0xa0
 80037c0:	d902      	bls.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037c2:	2302      	movs	r3, #2
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	e013      	b.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037c8:	2301      	movs	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	e010      	b.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d902      	bls.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037d4:	2303      	movs	r3, #3
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e00a      	b.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d102      	bne.n	80037e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037e0:	2302      	movs	r3, #2
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	e004      	b.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b70      	cmp	r3, #112	; 0x70
 80037ea:	d101      	bne.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037ec:	2301      	movs	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 0207 	bic.w	r2, r3, #7
 80037f8:	4909      	ldr	r1, [pc, #36]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	40022000 	.word	0x40022000

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800382c:	2300      	movs	r3, #0
 800382e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003830:	2300      	movs	r3, #0
 8003832:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03f      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003848:	d01c      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800384a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384e:	d802      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003854:	e01f      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800385c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003860:	d01c      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003862:	e018      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003864:	4b85      	ldr	r3, [pc, #532]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a84      	ldr	r2, [pc, #528]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003870:	e015      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fadb 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003882:	e00c      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3320      	adds	r3, #32
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fbc2 	bl	8004014 <RCCEx_PLLSAI2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	74fb      	strb	r3, [r7, #19]
      break;
 800389a:	e000      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800389c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389e:	7cfb      	ldrb	r3, [r7, #19]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038a4:	4b75      	ldr	r3, [pc, #468]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b2:	4972      	ldr	r1, [pc, #456]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038ba:	e001      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d4:	d01c      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80038d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038da:	d802      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80038e0:	e01f      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038e6:	d003      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80038e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038ec:	d01c      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80038ee:	e018      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038f0:	4b62      	ldr	r3, [pc, #392]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a61      	ldr	r2, [pc, #388]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038fc:	e015      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fa95 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800390e:	e00c      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3320      	adds	r3, #32
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fb7c 	bl	8004014 <RCCEx_PLLSAI2_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	74fb      	strb	r3, [r7, #19]
      break;
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003930:	4b52      	ldr	r3, [pc, #328]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393e:	494f      	ldr	r1, [pc, #316]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003946:	e001      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a0 	beq.w	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	4b41      	ldr	r3, [pc, #260]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	6593      	str	r3, [r2, #88]	; 0x58
 8003980:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398c:	2301      	movs	r3, #1
 800398e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003990:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a3a      	ldr	r2, [pc, #232]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800399c:	f7fd f8ea 	bl	8000b74 <HAL_GetTick>
 80039a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039a2:	e009      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a4:	f7fd f8e6 	bl	8000b74 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d902      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	74fb      	strb	r3, [r7, #19]
        break;
 80039b6:	e005      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039b8:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ef      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d15c      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ca:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d019      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039f4:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fa:	4a20      	ldr	r2, [pc, #128]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fd f8a5 	bl	8000b74 <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2c:	e00b      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2e:	f7fd f8a1 	bl	8000b74 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d902      	bls.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	74fb      	strb	r3, [r7, #19]
            break;
 8003a44:	e006      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ec      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	4904      	ldr	r1, [pc, #16]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a72:	e009      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
 8003a78:	e006      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a88:	7c7b      	ldrb	r3, [r7, #17]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d105      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8e:	4ba6      	ldr	r3, [pc, #664]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	4aa5      	ldr	r2, [pc, #660]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa6:	4ba0      	ldr	r3, [pc, #640]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f023 0203 	bic.w	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	499c      	ldr	r1, [pc, #624]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ac8:	4b97      	ldr	r3, [pc, #604]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f023 020c 	bic.w	r2, r3, #12
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	4994      	ldr	r1, [pc, #592]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aea:	4b8f      	ldr	r3, [pc, #572]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	498b      	ldr	r1, [pc, #556]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b0c:	4b86      	ldr	r3, [pc, #536]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	4983      	ldr	r1, [pc, #524]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b2e:	4b7e      	ldr	r3, [pc, #504]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	497a      	ldr	r1, [pc, #488]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b50:	4b75      	ldr	r3, [pc, #468]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	4972      	ldr	r1, [pc, #456]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b72:	4b6d      	ldr	r3, [pc, #436]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b80:	4969      	ldr	r1, [pc, #420]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b94:	4b64      	ldr	r3, [pc, #400]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba2:	4961      	ldr	r1, [pc, #388]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	4958      	ldr	r1, [pc, #352]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bd8:	4b53      	ldr	r3, [pc, #332]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	4950      	ldr	r1, [pc, #320]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bfa:	4b4b      	ldr	r3, [pc, #300]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	4947      	ldr	r1, [pc, #284]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c1c:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	493f      	ldr	r1, [pc, #252]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d028      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c3e:	4b3a      	ldr	r3, [pc, #232]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4936      	ldr	r1, [pc, #216]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c5c:	d106      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c5e:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	4a31      	ldr	r2, [pc, #196]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c68:	60d3      	str	r3, [r2, #12]
 8003c6a:	e011      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 f8d9 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d028      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c9c:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003caa:	491f      	ldr	r1, [pc, #124]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cba:	d106      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cc6:	60d3      	str	r3, [r2, #12]
 8003cc8:	e011      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd2:	d10c      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f8aa 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d02a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d08:	4907      	ldr	r1, [pc, #28]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d18:	d108      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1a:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4a02      	ldr	r2, [pc, #8]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d24:	60d3      	str	r3, [r2, #12]
 8003d26:	e013      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003d28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f879 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d46:	7cfb      	ldrb	r3, [r7, #19]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02f      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6a:	4929      	ldr	r1, [pc, #164]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7a:	d10d      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	2102      	movs	r1, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f856 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d014      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003d92:	7cfb      	ldrb	r3, [r7, #19]
 8003d94:	74bb      	strb	r3, [r7, #18]
 8003d96:	e011      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3320      	adds	r3, #32
 8003da6:	2102      	movs	r1, #2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f933 	bl	8004014 <RCCEx_PLLSAI2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd8:	490d      	ldr	r1, [pc, #52]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfc:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e04:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000

08003e14 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e1e:	f043 0304 	orr.w	r3, r3, #4
 8003e22:	6013      	str	r3, [r2, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000

08003e34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e42:	4b73      	ldr	r3, [pc, #460]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d018      	beq.n	8003e80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e4e:	4b70      	ldr	r3, [pc, #448]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0203 	and.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d10d      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
       ||
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e66:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
       ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d044      	beq.n	8003f04 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
 8003e7e:	e041      	b.n	8003f04 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d00c      	beq.n	8003ea2 <RCCEx_PLLSAI1_Config+0x6e>
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d013      	beq.n	8003eb4 <RCCEx_PLLSAI1_Config+0x80>
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d120      	bne.n	8003ed2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e90:	4b5f      	ldr	r3, [pc, #380]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11d      	bne.n	8003ed8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea0:	e01a      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d116      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb2:	e013      	b.n	8003edc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eb4:	4b56      	ldr	r3, [pc, #344]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ec0:	4b53      	ldr	r3, [pc, #332]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ed0:	e006      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed6:	e004      	b.n	8003ee2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ed8:	bf00      	nop
 8003eda:	e002      	b.n	8003ee2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003edc:	bf00      	nop
 8003ede:	e000      	b.n	8003ee2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ee0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ee8:	4b49      	ldr	r3, [pc, #292]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	430b      	orrs	r3, r1
 8003efe:	4944      	ldr	r1, [pc, #272]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d17c      	bne.n	8004004 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a40      	ldr	r2, [pc, #256]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f16:	f7fc fe2d 	bl	8000b74 <HAL_GetTick>
 8003f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f1c:	e009      	b.n	8003f32 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f1e:	f7fc fe29 	bl	8000b74 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d902      	bls.n	8003f32 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	73fb      	strb	r3, [r7, #15]
        break;
 8003f30:	e005      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f32:	4b37      	ldr	r3, [pc, #220]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ef      	bne.n	8003f1e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d15f      	bne.n	8004004 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d110      	bne.n	8003f6c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6892      	ldr	r2, [r2, #8]
 8003f5a:	0211      	lsls	r1, r2, #8
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68d2      	ldr	r2, [r2, #12]
 8003f60:	06d2      	lsls	r2, r2, #27
 8003f62:	430a      	orrs	r2, r1
 8003f64:	492a      	ldr	r1, [pc, #168]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	610b      	str	r3, [r1, #16]
 8003f6a:	e027      	b.n	8003fbc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d112      	bne.n	8003f98 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f72:	4b27      	ldr	r3, [pc, #156]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6892      	ldr	r2, [r2, #8]
 8003f82:	0211      	lsls	r1, r2, #8
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6912      	ldr	r2, [r2, #16]
 8003f88:	0852      	lsrs	r2, r2, #1
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	0552      	lsls	r2, r2, #21
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	491f      	ldr	r1, [pc, #124]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	610b      	str	r3, [r1, #16]
 8003f96:	e011      	b.n	8003fbc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6892      	ldr	r2, [r2, #8]
 8003fa8:	0211      	lsls	r1, r2, #8
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6952      	ldr	r2, [r2, #20]
 8003fae:	0852      	lsrs	r2, r2, #1
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0652      	lsls	r2, r2, #25
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	4916      	ldr	r1, [pc, #88]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fbc:	4b14      	ldr	r3, [pc, #80]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fc fdd4 	bl	8000b74 <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fce:	e009      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd0:	f7fc fdd0 	bl	8000b74 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d902      	bls.n	8003fe4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8003fe2:	e005      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ef      	beq.n	8003fd0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	4904      	ldr	r1, [pc, #16]	; (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000

08004014 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004022:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d018      	beq.n	8004060 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800402e:	4b65      	ldr	r3, [pc, #404]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0203 	and.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d10d      	bne.n	800405a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
       ||
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004046:	4b5f      	ldr	r3, [pc, #380]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
       ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d044      	beq.n	80040e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	e041      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d00c      	beq.n	8004082 <RCCEx_PLLSAI2_Config+0x6e>
 8004068:	2b03      	cmp	r3, #3
 800406a:	d013      	beq.n	8004094 <RCCEx_PLLSAI2_Config+0x80>
 800406c:	2b01      	cmp	r3, #1
 800406e:	d120      	bne.n	80040b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004070:	4b54      	ldr	r3, [pc, #336]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11d      	bne.n	80040b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004080:	e01a      	b.n	80040b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004082:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	2b00      	cmp	r3, #0
 800408c:	d116      	bne.n	80040bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004092:	e013      	b.n	80040bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004094:	4b4b      	ldr	r3, [pc, #300]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10f      	bne.n	80040c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040a0:	4b48      	ldr	r3, [pc, #288]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040b0:	e006      	b.n	80040c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
      break;
 80040b6:	e004      	b.n	80040c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80040b8:	bf00      	nop
 80040ba:	e002      	b.n	80040c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80040c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040c8:	4b3e      	ldr	r3, [pc, #248]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	3b01      	subs	r3, #1
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	430b      	orrs	r3, r1
 80040de:	4939      	ldr	r1, [pc, #228]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d166      	bne.n	80041b8 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040ea:	4b36      	ldr	r3, [pc, #216]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a35      	ldr	r2, [pc, #212]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f6:	f7fc fd3d 	bl	8000b74 <HAL_GetTick>
 80040fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040fc:	e009      	b.n	8004112 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040fe:	f7fc fd39 	bl	8000b74 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d902      	bls.n	8004112 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	73fb      	strb	r3, [r7, #15]
        break;
 8004110:	e005      	b.n	800411e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004112:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ef      	bne.n	80040fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d149      	bne.n	80041b8 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d110      	bne.n	800414c <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004132:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6892      	ldr	r2, [r2, #8]
 800413a:	0211      	lsls	r1, r2, #8
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68d2      	ldr	r2, [r2, #12]
 8004140:	06d2      	lsls	r2, r2, #27
 8004142:	430a      	orrs	r2, r1
 8004144:	491f      	ldr	r1, [pc, #124]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	614b      	str	r3, [r1, #20]
 800414a:	e011      	b.n	8004170 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004154:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6892      	ldr	r2, [r2, #8]
 800415c:	0211      	lsls	r1, r2, #8
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6912      	ldr	r2, [r2, #16]
 8004162:	0852      	lsrs	r2, r2, #1
 8004164:	3a01      	subs	r2, #1
 8004166:	0652      	lsls	r2, r2, #25
 8004168:	430a      	orrs	r2, r1
 800416a:	4916      	ldr	r1, [pc, #88]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800416c:	4313      	orrs	r3, r2
 800416e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fc fcfa 	bl	8000b74 <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004182:	e009      	b.n	8004198 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004184:	f7fc fcf6 	bl	8000b74 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d902      	bls.n	8004198 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	73fb      	strb	r3, [r7, #15]
          break;
 8004196:	e005      	b.n	80041a4 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ef      	beq.n	8004184 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4904      	ldr	r1, [pc, #16]	; (80041c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000

080041c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e040      	b.n	800425c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fb46 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8c0 	bl	800438c <UART_SetConfig>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e022      	b.n	800425c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fb3e 	bl	80048a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fbc5 	bl	80049e4 <UART_CheckIdleState>
 800425a:	4603      	mov	r3, r0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	2b20      	cmp	r3, #32
 800427a:	f040 8081 	bne.w	8004380 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_Transmit+0x26>
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e079      	b.n	8004382 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_UART_Transmit+0x38>
 8004298:	2302      	movs	r3, #2
 800429a:	e072      	b.n	8004382 <HAL_UART_Transmit+0x11e>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2221      	movs	r2, #33	; 0x21
 80042ae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80042b0:	f7fc fc60 	bl	8000b74 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ce:	d108      	bne.n	80042e2 <HAL_UART_Transmit+0x7e>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	e003      	b.n	80042ea <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80042f2:	e02d      	b.n	8004350 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2200      	movs	r2, #0
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fbb5 	bl	8004a6e <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e039      	b.n	8004382 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	881a      	ldrh	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004320:	b292      	uxth	r2, r2
 8004322:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	3302      	adds	r3, #2
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	e008      	b.n	800433e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b292      	uxth	r2, r2
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1cb      	bne.n	80042f4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2200      	movs	r2, #0
 8004364:	2140      	movs	r1, #64	; 0x40
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fb81 	bl	8004a6e <UART_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e005      	b.n	8004382 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	e000      	b.n	8004382 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004380:	2302      	movs	r3, #2
  }
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800438c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004390:	b088      	sub	sp, #32
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4bac      	ldr	r3, [pc, #688]	; (800466c <UART_SetConfig+0x2e0>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	69f9      	ldr	r1, [r7, #28]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4aa2      	ldr	r2, [pc, #648]	; (8004670 <UART_SetConfig+0x2e4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a99      	ldr	r2, [pc, #612]	; (8004674 <UART_SetConfig+0x2e8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d121      	bne.n	8004458 <UART_SetConfig+0xcc>
 8004414:	4b98      	ldr	r3, [pc, #608]	; (8004678 <UART_SetConfig+0x2ec>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b03      	cmp	r3, #3
 8004420:	d816      	bhi.n	8004450 <UART_SetConfig+0xc4>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x9c>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004439 	.word	0x08004439
 800442c:	08004445 	.word	0x08004445
 8004430:	0800443f 	.word	0x0800443f
 8004434:	0800444b 	.word	0x0800444b
 8004438:	2301      	movs	r3, #1
 800443a:	76fb      	strb	r3, [r7, #27]
 800443c:	e0e8      	b.n	8004610 <UART_SetConfig+0x284>
 800443e:	2302      	movs	r3, #2
 8004440:	76fb      	strb	r3, [r7, #27]
 8004442:	e0e5      	b.n	8004610 <UART_SetConfig+0x284>
 8004444:	2304      	movs	r3, #4
 8004446:	76fb      	strb	r3, [r7, #27]
 8004448:	e0e2      	b.n	8004610 <UART_SetConfig+0x284>
 800444a:	2308      	movs	r3, #8
 800444c:	76fb      	strb	r3, [r7, #27]
 800444e:	e0df      	b.n	8004610 <UART_SetConfig+0x284>
 8004450:	2310      	movs	r3, #16
 8004452:	76fb      	strb	r3, [r7, #27]
 8004454:	bf00      	nop
 8004456:	e0db      	b.n	8004610 <UART_SetConfig+0x284>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a87      	ldr	r2, [pc, #540]	; (800467c <UART_SetConfig+0x2f0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d134      	bne.n	80044cc <UART_SetConfig+0x140>
 8004462:	4b85      	ldr	r3, [pc, #532]	; (8004678 <UART_SetConfig+0x2ec>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d829      	bhi.n	80044c4 <UART_SetConfig+0x138>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <UART_SetConfig+0xec>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080044c5 	.word	0x080044c5
 8004480:	080044c5 	.word	0x080044c5
 8004484:	080044c5 	.word	0x080044c5
 8004488:	080044b9 	.word	0x080044b9
 800448c:	080044c5 	.word	0x080044c5
 8004490:	080044c5 	.word	0x080044c5
 8004494:	080044c5 	.word	0x080044c5
 8004498:	080044b3 	.word	0x080044b3
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044c5 	.word	0x080044c5
 80044a8:	080044bf 	.word	0x080044bf
 80044ac:	2300      	movs	r3, #0
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	e0ae      	b.n	8004610 <UART_SetConfig+0x284>
 80044b2:	2302      	movs	r3, #2
 80044b4:	76fb      	strb	r3, [r7, #27]
 80044b6:	e0ab      	b.n	8004610 <UART_SetConfig+0x284>
 80044b8:	2304      	movs	r3, #4
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	e0a8      	b.n	8004610 <UART_SetConfig+0x284>
 80044be:	2308      	movs	r3, #8
 80044c0:	76fb      	strb	r3, [r7, #27]
 80044c2:	e0a5      	b.n	8004610 <UART_SetConfig+0x284>
 80044c4:	2310      	movs	r3, #16
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	bf00      	nop
 80044ca:	e0a1      	b.n	8004610 <UART_SetConfig+0x284>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6b      	ldr	r2, [pc, #428]	; (8004680 <UART_SetConfig+0x2f4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d120      	bne.n	8004518 <UART_SetConfig+0x18c>
 80044d6:	4b68      	ldr	r3, [pc, #416]	; (8004678 <UART_SetConfig+0x2ec>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d00f      	beq.n	8004504 <UART_SetConfig+0x178>
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d802      	bhi.n	80044ee <UART_SetConfig+0x162>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <UART_SetConfig+0x16c>
 80044ec:	e010      	b.n	8004510 <UART_SetConfig+0x184>
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d005      	beq.n	80044fe <UART_SetConfig+0x172>
 80044f2:	2b30      	cmp	r3, #48	; 0x30
 80044f4:	d009      	beq.n	800450a <UART_SetConfig+0x17e>
 80044f6:	e00b      	b.n	8004510 <UART_SetConfig+0x184>
 80044f8:	2300      	movs	r3, #0
 80044fa:	76fb      	strb	r3, [r7, #27]
 80044fc:	e088      	b.n	8004610 <UART_SetConfig+0x284>
 80044fe:	2302      	movs	r3, #2
 8004500:	76fb      	strb	r3, [r7, #27]
 8004502:	e085      	b.n	8004610 <UART_SetConfig+0x284>
 8004504:	2304      	movs	r3, #4
 8004506:	76fb      	strb	r3, [r7, #27]
 8004508:	e082      	b.n	8004610 <UART_SetConfig+0x284>
 800450a:	2308      	movs	r3, #8
 800450c:	76fb      	strb	r3, [r7, #27]
 800450e:	e07f      	b.n	8004610 <UART_SetConfig+0x284>
 8004510:	2310      	movs	r3, #16
 8004512:	76fb      	strb	r3, [r7, #27]
 8004514:	bf00      	nop
 8004516:	e07b      	b.n	8004610 <UART_SetConfig+0x284>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a59      	ldr	r2, [pc, #356]	; (8004684 <UART_SetConfig+0x2f8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d120      	bne.n	8004564 <UART_SetConfig+0x1d8>
 8004522:	4b55      	ldr	r3, [pc, #340]	; (8004678 <UART_SetConfig+0x2ec>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d00f      	beq.n	8004550 <UART_SetConfig+0x1c4>
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d802      	bhi.n	800453a <UART_SetConfig+0x1ae>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <UART_SetConfig+0x1b8>
 8004538:	e010      	b.n	800455c <UART_SetConfig+0x1d0>
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d005      	beq.n	800454a <UART_SetConfig+0x1be>
 800453e:	2bc0      	cmp	r3, #192	; 0xc0
 8004540:	d009      	beq.n	8004556 <UART_SetConfig+0x1ca>
 8004542:	e00b      	b.n	800455c <UART_SetConfig+0x1d0>
 8004544:	2300      	movs	r3, #0
 8004546:	76fb      	strb	r3, [r7, #27]
 8004548:	e062      	b.n	8004610 <UART_SetConfig+0x284>
 800454a:	2302      	movs	r3, #2
 800454c:	76fb      	strb	r3, [r7, #27]
 800454e:	e05f      	b.n	8004610 <UART_SetConfig+0x284>
 8004550:	2304      	movs	r3, #4
 8004552:	76fb      	strb	r3, [r7, #27]
 8004554:	e05c      	b.n	8004610 <UART_SetConfig+0x284>
 8004556:	2308      	movs	r3, #8
 8004558:	76fb      	strb	r3, [r7, #27]
 800455a:	e059      	b.n	8004610 <UART_SetConfig+0x284>
 800455c:	2310      	movs	r3, #16
 800455e:	76fb      	strb	r3, [r7, #27]
 8004560:	bf00      	nop
 8004562:	e055      	b.n	8004610 <UART_SetConfig+0x284>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a47      	ldr	r2, [pc, #284]	; (8004688 <UART_SetConfig+0x2fc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d124      	bne.n	80045b8 <UART_SetConfig+0x22c>
 800456e:	4b42      	ldr	r3, [pc, #264]	; (8004678 <UART_SetConfig+0x2ec>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457c:	d012      	beq.n	80045a4 <UART_SetConfig+0x218>
 800457e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004582:	d802      	bhi.n	800458a <UART_SetConfig+0x1fe>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <UART_SetConfig+0x20c>
 8004588:	e012      	b.n	80045b0 <UART_SetConfig+0x224>
 800458a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458e:	d006      	beq.n	800459e <UART_SetConfig+0x212>
 8004590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004594:	d009      	beq.n	80045aa <UART_SetConfig+0x21e>
 8004596:	e00b      	b.n	80045b0 <UART_SetConfig+0x224>
 8004598:	2300      	movs	r3, #0
 800459a:	76fb      	strb	r3, [r7, #27]
 800459c:	e038      	b.n	8004610 <UART_SetConfig+0x284>
 800459e:	2302      	movs	r3, #2
 80045a0:	76fb      	strb	r3, [r7, #27]
 80045a2:	e035      	b.n	8004610 <UART_SetConfig+0x284>
 80045a4:	2304      	movs	r3, #4
 80045a6:	76fb      	strb	r3, [r7, #27]
 80045a8:	e032      	b.n	8004610 <UART_SetConfig+0x284>
 80045aa:	2308      	movs	r3, #8
 80045ac:	76fb      	strb	r3, [r7, #27]
 80045ae:	e02f      	b.n	8004610 <UART_SetConfig+0x284>
 80045b0:	2310      	movs	r3, #16
 80045b2:	76fb      	strb	r3, [r7, #27]
 80045b4:	bf00      	nop
 80045b6:	e02b      	b.n	8004610 <UART_SetConfig+0x284>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2c      	ldr	r2, [pc, #176]	; (8004670 <UART_SetConfig+0x2e4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d124      	bne.n	800460c <UART_SetConfig+0x280>
 80045c2:	4b2d      	ldr	r3, [pc, #180]	; (8004678 <UART_SetConfig+0x2ec>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d0:	d012      	beq.n	80045f8 <UART_SetConfig+0x26c>
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d6:	d802      	bhi.n	80045de <UART_SetConfig+0x252>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <UART_SetConfig+0x260>
 80045dc:	e012      	b.n	8004604 <UART_SetConfig+0x278>
 80045de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e2:	d006      	beq.n	80045f2 <UART_SetConfig+0x266>
 80045e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e8:	d009      	beq.n	80045fe <UART_SetConfig+0x272>
 80045ea:	e00b      	b.n	8004604 <UART_SetConfig+0x278>
 80045ec:	2300      	movs	r3, #0
 80045ee:	76fb      	strb	r3, [r7, #27]
 80045f0:	e00e      	b.n	8004610 <UART_SetConfig+0x284>
 80045f2:	2302      	movs	r3, #2
 80045f4:	76fb      	strb	r3, [r7, #27]
 80045f6:	e00b      	b.n	8004610 <UART_SetConfig+0x284>
 80045f8:	2304      	movs	r3, #4
 80045fa:	76fb      	strb	r3, [r7, #27]
 80045fc:	e008      	b.n	8004610 <UART_SetConfig+0x284>
 80045fe:	2308      	movs	r3, #8
 8004600:	76fb      	strb	r3, [r7, #27]
 8004602:	e005      	b.n	8004610 <UART_SetConfig+0x284>
 8004604:	2310      	movs	r3, #16
 8004606:	76fb      	strb	r3, [r7, #27]
 8004608:	bf00      	nop
 800460a:	e001      	b.n	8004610 <UART_SetConfig+0x284>
 800460c:	2310      	movs	r3, #16
 800460e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a16      	ldr	r2, [pc, #88]	; (8004670 <UART_SetConfig+0x2e4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	f040 8087 	bne.w	800472a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800461c:	7efb      	ldrb	r3, [r7, #27]
 800461e:	2b08      	cmp	r3, #8
 8004620:	d836      	bhi.n	8004690 <UART_SetConfig+0x304>
 8004622:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <UART_SetConfig+0x29c>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	0800464d 	.word	0x0800464d
 800462c:	08004691 	.word	0x08004691
 8004630:	08004655 	.word	0x08004655
 8004634:	08004691 	.word	0x08004691
 8004638:	0800465b 	.word	0x0800465b
 800463c:	08004691 	.word	0x08004691
 8004640:	08004691 	.word	0x08004691
 8004644:	08004691 	.word	0x08004691
 8004648:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7ff f85e 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8004650:	6178      	str	r0, [r7, #20]
        break;
 8004652:	e022      	b.n	800469a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b0d      	ldr	r3, [pc, #52]	; (800468c <UART_SetConfig+0x300>)
 8004656:	617b      	str	r3, [r7, #20]
        break;
 8004658:	e01f      	b.n	800469a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe ffc1 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800465e:	6178      	str	r0, [r7, #20]
        break;
 8004660:	e01b      	b.n	800469a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004666:	617b      	str	r3, [r7, #20]
        break;
 8004668:	e017      	b.n	800469a <UART_SetConfig+0x30e>
 800466a:	bf00      	nop
 800466c:	efff69f3 	.word	0xefff69f3
 8004670:	40008000 	.word	0x40008000
 8004674:	40013800 	.word	0x40013800
 8004678:	40021000 	.word	0x40021000
 800467c:	40004400 	.word	0x40004400
 8004680:	40004800 	.word	0x40004800
 8004684:	40004c00 	.word	0x40004c00
 8004688:	40005000 	.word	0x40005000
 800468c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	76bb      	strb	r3, [r7, #26]
        break;
 8004698:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80f1 	beq.w	8004884 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d305      	bcc.n	80046be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d902      	bls.n	80046c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	76bb      	strb	r3, [r7, #26]
 80046c2:	e0df      	b.n	8004884 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4619      	mov	r1, r3
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	f04f 0400 	mov.w	r4, #0
 80046d4:	0214      	lsls	r4, r2, #8
 80046d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046da:	020b      	lsls	r3, r1, #8
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6852      	ldr	r2, [r2, #4]
 80046e0:	0852      	lsrs	r2, r2, #1
 80046e2:	4611      	mov	r1, r2
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	eb13 0b01 	adds.w	fp, r3, r1
 80046ec:	eb44 0c02 	adc.w	ip, r4, r2
 80046f0:	4658      	mov	r0, fp
 80046f2:	4661      	mov	r1, ip
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f04f 0400 	mov.w	r4, #0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	f7fb fd7c 	bl	80001fc <__aeabi_uldivmod>
 8004704:	4603      	mov	r3, r0
 8004706:	460c      	mov	r4, r1
 8004708:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004710:	d308      	bcc.n	8004724 <UART_SetConfig+0x398>
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004718:	d204      	bcs.n	8004724 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	60da      	str	r2, [r3, #12]
 8004722:	e0af      	b.n	8004884 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	76bb      	strb	r3, [r7, #26]
 8004728:	e0ac      	b.n	8004884 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004732:	d15b      	bne.n	80047ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004734:	7efb      	ldrb	r3, [r7, #27]
 8004736:	2b08      	cmp	r3, #8
 8004738:	d827      	bhi.n	800478a <UART_SetConfig+0x3fe>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <UART_SetConfig+0x3b4>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004765 	.word	0x08004765
 8004744:	0800476d 	.word	0x0800476d
 8004748:	08004775 	.word	0x08004775
 800474c:	0800478b 	.word	0x0800478b
 8004750:	0800477b 	.word	0x0800477b
 8004754:	0800478b 	.word	0x0800478b
 8004758:	0800478b 	.word	0x0800478b
 800475c:	0800478b 	.word	0x0800478b
 8004760:	08004783 	.word	0x08004783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004764:	f7fe ffd2 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8004768:	6178      	str	r0, [r7, #20]
        break;
 800476a:	e013      	b.n	8004794 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800476c:	f7fe ffe4 	bl	8003738 <HAL_RCC_GetPCLK2Freq>
 8004770:	6178      	str	r0, [r7, #20]
        break;
 8004772:	e00f      	b.n	8004794 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004774:	4b49      	ldr	r3, [pc, #292]	; (800489c <UART_SetConfig+0x510>)
 8004776:	617b      	str	r3, [r7, #20]
        break;
 8004778:	e00c      	b.n	8004794 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477a:	f7fe ff31 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800477e:	6178      	str	r0, [r7, #20]
        break;
 8004780:	e008      	b.n	8004794 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004786:	617b      	str	r3, [r7, #20]
        break;
 8004788:	e004      	b.n	8004794 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	76bb      	strb	r3, [r7, #26]
        break;
 8004792:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d074      	beq.n	8004884 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	005a      	lsls	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	441a      	add	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d916      	bls.n	80047e6 <UART_SetConfig+0x45a>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d212      	bcs.n	80047e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f023 030f 	bic.w	r3, r3, #15
 80047c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	4313      	orrs	r3, r2
 80047da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	89fa      	ldrh	r2, [r7, #14]
 80047e2:	60da      	str	r2, [r3, #12]
 80047e4:	e04e      	b.n	8004884 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	76bb      	strb	r3, [r7, #26]
 80047ea:	e04b      	b.n	8004884 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ec:	7efb      	ldrb	r3, [r7, #27]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d827      	bhi.n	8004842 <UART_SetConfig+0x4b6>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x46c>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004843 	.word	0x08004843
 8004808:	08004833 	.word	0x08004833
 800480c:	08004843 	.word	0x08004843
 8004810:	08004843 	.word	0x08004843
 8004814:	08004843 	.word	0x08004843
 8004818:	0800483b 	.word	0x0800483b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7fe ff76 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8004820:	6178      	str	r0, [r7, #20]
        break;
 8004822:	e013      	b.n	800484c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7fe ff88 	bl	8003738 <HAL_RCC_GetPCLK2Freq>
 8004828:	6178      	str	r0, [r7, #20]
        break;
 800482a:	e00f      	b.n	800484c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <UART_SetConfig+0x510>)
 800482e:	617b      	str	r3, [r7, #20]
        break;
 8004830:	e00c      	b.n	800484c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004832:	f7fe fed5 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8004836:	6178      	str	r0, [r7, #20]
        break;
 8004838:	e008      	b.n	800484c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800483e:	617b      	str	r3, [r7, #20]
        break;
 8004840:	e004      	b.n	800484c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	76bb      	strb	r3, [r7, #26]
        break;
 800484a:	bf00      	nop
    }

    if (pclk != 0U)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d018      	beq.n	8004884 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	085a      	lsrs	r2, r3, #1
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	441a      	add	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	b29b      	uxth	r3, r3
 8004866:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b0f      	cmp	r3, #15
 800486c:	d908      	bls.n	8004880 <UART_SetConfig+0x4f4>
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d204      	bcs.n	8004880 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	e001      	b.n	8004884 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004890:	7ebb      	ldrb	r3, [r7, #26]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800489c:	00f42400 	.word	0x00f42400

080048a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01a      	beq.n	80049b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499e:	d10a      	bne.n	80049b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]
  }
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049f2:	f7fc f8bf 	bl	8000b74 <HAL_GetTick>
 80049f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d10e      	bne.n	8004a24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f82a 	bl	8004a6e <UART_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e020      	b.n	8004a66 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d10e      	bne.n	8004a50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f814 	bl	8004a6e <UART_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e00a      	b.n	8004a66 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7e:	e05d      	b.n	8004b3c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a86:	d059      	beq.n	8004b3c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a88:	f7fc f874 	bl	8000b74 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11b      	bne.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0201 	bic.w	r2, r2, #1
 8004abc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e042      	b.n	8004b5c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02b      	beq.n	8004b3c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af2:	d123      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004afc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b0c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e00f      	b.n	8004b5c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69da      	ldr	r2, [r3, #28]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d092      	beq.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b64:	b084      	sub	sp, #16
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	f107 001c 	add.w	r0, r7, #28
 8004b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d122      	bne.n	8004bc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f936 	bl	8004e28 <USB_CoreReset>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	73fb      	strb	r3, [r7, #15]
 8004bc0:	e01a      	b.n	8004bf8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f92a 	bl	8004e28 <USB_CoreReset>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38
 8004bea:	e005      	b.n	8004bf8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c04:	b004      	add	sp, #16
 8004c06:	4770      	bx	lr

08004c08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f043 0201 	orr.w	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 0201 	bic.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d106      	bne.n	8004c78 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	e00b      	b.n	8004c90 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	e001      	b.n	8004c90 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e003      	b.n	8004c98 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c90:	2032      	movs	r0, #50	; 0x32
 8004c92:	f7fb ff7b 	bl	8000b8c <HAL_Delay>

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	019b      	lsls	r3, r3, #6
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <USB_FlushTxFifo+0x48>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e006      	b.n	8004cda <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d0f0      	beq.n	8004cba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	00030d40 	.word	0x00030d40

08004cec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3301      	adds	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <USB_FlushRxFifo+0x40>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d901      	bls.n	8004d10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e006      	b.n	8004d1e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d0f0      	beq.n	8004cfe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	00030d40 	.word	0x00030d40

08004d30 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	460b      	mov	r3, r1
 8004d40:	71fb      	strb	r3, [r7, #7]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004d4e:	88bb      	ldrh	r3, [r7, #4]
 8004d50:	3303      	adds	r3, #3
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	e00f      	b.n	8004d7c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	031a      	lsls	r2, r3, #12
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d68:	461a      	mov	r2, r3
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	3304      	adds	r3, #4
 8004d74:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d3eb      	bcc.n	8004d5c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3724      	adds	r7, #36	; 0x24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b089      	sub	sp, #36	; 0x24
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	3303      	adds	r3, #3
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e00b      	b.n	8004dce <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d3ef      	bcc.n	8004db6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004dd6:	69fb      	ldr	r3, [r7, #28]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3724      	adds	r7, #36	; 0x24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0301 	and.w	r3, r3, #1
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <USB_CoreReset+0x64>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e01b      	b.n	8004e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	daf2      	bge.n	8004e34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f043 0201 	orr.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <USB_CoreReset+0x64>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d901      	bls.n	8004e70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e006      	b.n	8004e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d0f0      	beq.n	8004e5e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	00030d40 	.word	0x00030d40

08004e90 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e90:	b084      	sub	sp, #16
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	f107 001c 	add.w	r0, r7, #28
 8004e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004eac:	461a      	mov	r2, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ede:	2110      	movs	r1, #16
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fedd 	bl	8004ca0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff ff00 	bl	8004cec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e015      	b.n	8004f1e <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	461a      	mov	r2, r3
 8004f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f04:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f12:	461a      	mov	r2, r3
 8004f14:	2300      	movs	r3, #0
 8004f16:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d3e5      	bcc.n	8004ef2 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004f26:	2101      	movs	r1, #1
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f893 	bl	8005054 <USB_DriveVbus>

  HAL_Delay(200U);
 8004f2e:	20c8      	movs	r0, #200	; 0xc8
 8004f30:	f7fb fe2c 	bl	8000b8c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f40:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2280      	movs	r2, #128	; 0x80
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a0d      	ldr	r2, [pc, #52]	; (8004f80 <USB_HostInit+0xf0>)
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <USB_HostInit+0xf4>)
 8004f52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f043 0210 	orr.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <USB_HostInit+0xf8>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f7a:	b004      	add	sp, #16
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	00600080 	.word	0x00600080
 8004f84:	004000e0 	.word	0x004000e0
 8004f88:	a3200008 	.word	0xa3200008

08004f8c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	68f9      	ldr	r1, [r7, #12]
 8004fc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004fda:	6053      	str	r3, [r2, #4]
 8004fdc:	e009      	b.n	8004ff2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d106      	bne.n	8004ff2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fea:	461a      	mov	r2, r3
 8004fec:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ff0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005020:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800502a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005030:	2064      	movs	r0, #100	; 0x64
 8005032:	f7fb fdab 	bl	8000b8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800503e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005042:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005044:	200a      	movs	r0, #10
 8005046:	f7fb fda1 	bl	8000b8c <HAL_Delay>

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005078:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d109      	bne.n	8005098 <USB_DriveVbus+0x44>
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d106      	bne.n	8005098 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005092:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005096:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d109      	bne.n	80050b8 <USB_DriveVbus+0x64>
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	0c5b      	lsrs	r3, r3, #17
 80050e4:	f003 0303 	and.w	r3, r3, #3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	b29b      	uxth	r3, r3
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	4608      	mov	r0, r1
 8005122:	4611      	mov	r1, r2
 8005124:	461a      	mov	r2, r3
 8005126:	4603      	mov	r3, r0
 8005128:	70fb      	strb	r3, [r7, #3]
 800512a:	460b      	mov	r3, r1
 800512c:	70bb      	strb	r3, [r7, #2]
 800512e:	4613      	mov	r3, r2
 8005130:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005146:	461a      	mov	r2, r3
 8005148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800514c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800514e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005152:	2b03      	cmp	r3, #3
 8005154:	d867      	bhi.n	8005226 <USB_HC_Init+0x10e>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <USB_HC_Init+0x44>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	0800516d 	.word	0x0800516d
 8005160:	080051e9 	.word	0x080051e9
 8005164:	0800516d 	.word	0x0800516d
 8005168:	080051ab 	.word	0x080051ab
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4413      	add	r3, r2
 8005174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005178:	461a      	mov	r2, r3
 800517a:	f240 439d 	movw	r3, #1181	; 0x49d
 800517e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005180:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005184:	2b00      	cmp	r3, #0
 8005186:	da51      	bge.n	800522c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	440a      	add	r2, r1
 800519e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a6:	60d3      	str	r3, [r2, #12]
      }
      break;
 80051a8:	e040      	b.n	800522c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	461a      	mov	r2, r3
 80051b8:	f240 639d 	movw	r3, #1693	; 0x69d
 80051bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	da34      	bge.n	8005230 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	78fa      	ldrb	r2, [r7, #3]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80051e6:	e023      	b.n	8005230 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	461a      	mov	r2, r3
 80051f6:	f240 2325 	movw	r3, #549	; 0x225
 80051fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005200:	2b00      	cmp	r3, #0
 8005202:	da17      	bge.n	8005234 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	440a      	add	r2, r1
 800521a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005222:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005224:	e006      	b.n	8005234 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	e004      	b.n	8005236 <USB_HC_Init+0x11e>
      break;
 800522c:	bf00      	nop
 800522e:	e002      	b.n	8005236 <USB_HC_Init+0x11e>
      break;
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <USB_HC_Init+0x11e>
      break;
 8005234:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	2101      	movs	r1, #1
 8005246:	fa01 f303 	lsl.w	r3, r1, r3
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005250:	4313      	orrs	r3, r2
 8005252:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005260:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005264:	2b00      	cmp	r3, #0
 8005266:	da03      	bge.n	8005270 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e001      	b.n	8005274 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005274:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d103      	bne.n	8005284 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800527c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	e001      	b.n	8005288 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005288:	787b      	ldrb	r3, [r7, #1]
 800528a:	059b      	lsls	r3, r3, #22
 800528c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005290:	78bb      	ldrb	r3, [r7, #2]
 8005292:	02db      	lsls	r3, r3, #11
 8005294:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005298:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800529a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800529e:	049b      	lsls	r3, r3, #18
 80052a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80052a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80052ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	0159      	lsls	r1, r3, #5
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	440b      	add	r3, r1
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052c4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80052c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d10f      	bne.n	80052ee <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005314:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	8912      	ldrh	r2, [r2, #8]
 8005326:	4413      	add	r3, r2
 8005328:	3b01      	subs	r3, #1
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	8912      	ldrh	r2, [r2, #8]
 800532e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005332:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005334:	8bfa      	ldrh	r2, [r7, #30]
 8005336:	8a7b      	ldrh	r3, [r7, #18]
 8005338:	429a      	cmp	r2, r3
 800533a:	d90b      	bls.n	8005354 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800533c:	8a7b      	ldrh	r3, [r7, #18]
 800533e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005340:	8bfb      	ldrh	r3, [r7, #30]
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	8912      	ldrh	r2, [r2, #8]
 8005346:	fb02 f203 	mul.w	r2, r2, r3
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	e001      	b.n	8005354 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8005350:	2301      	movs	r3, #1
 8005352:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	78db      	ldrb	r3, [r3, #3]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d006      	beq.n	800536a <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800535c:	8bfb      	ldrh	r3, [r7, #30]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	8912      	ldrh	r2, [r2, #8]
 8005362:	fb02 f203 	mul.w	r2, r2, r3
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005372:	8bfb      	ldrh	r3, [r7, #30]
 8005374:	04d9      	lsls	r1, r3, #19
 8005376:	4b5f      	ldr	r3, [pc, #380]	; (80054f4 <USB_HC_StartXfer+0x1f8>)
 8005378:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800537a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	7a9b      	ldrb	r3, [r3, #10]
 8005380:	075b      	lsls	r3, r3, #29
 8005382:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005386:	6979      	ldr	r1, [r7, #20]
 8005388:	0148      	lsls	r0, r1, #5
 800538a:	69b9      	ldr	r1, [r7, #24]
 800538c:	4401      	add	r1, r0
 800538e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005392:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005394:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80053cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	7c7b      	ldrb	r3, [r7, #17]
 80053de:	075b      	lsls	r3, r3, #29
 80053e0:	6979      	ldr	r1, [r7, #20]
 80053e2:	0148      	lsls	r0, r1, #5
 80053e4:	69b9      	ldr	r1, [r7, #24]
 80053e6:	4401      	add	r1, r0
 80053e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80053ec:	4313      	orrs	r3, r2
 80053ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a3e      	ldr	r2, [pc, #248]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 8005400:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005402:	4b3d      	ldr	r3, [pc, #244]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800540a:	4a3b      	ldr	r2, [pc, #236]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 800540c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	78db      	ldrb	r3, [r3, #3]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005416:	4b38      	ldr	r3, [pc, #224]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	4a36      	ldr	r2, [pc, #216]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e005      	b.n	8005430 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005424:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800542c:	4a32      	ldr	r2, [pc, #200]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 800542e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005430:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005438:	4a2f      	ldr	r2, [pc, #188]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 800543a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005448:	461a      	mov	r2, r3
 800544a:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <USB_HC_StartXfer+0x1fc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d148      	bne.n	80054ea <USB_HC_StartXfer+0x1ee>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d044      	beq.n	80054ea <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	79db      	ldrb	r3, [r3, #7]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d831      	bhi.n	80054cc <USB_HC_StartXfer+0x1d0>
 8005468:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <USB_HC_StartXfer+0x174>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	08005481 	.word	0x08005481
 8005474:	080054a5 	.word	0x080054a5
 8005478:	08005481 	.word	0x08005481
 800547c:	080054a5 	.word	0x080054a5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	3303      	adds	r3, #3
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800548a:	89fa      	ldrh	r2, [r7, #14]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	b29b      	uxth	r3, r3
 8005492:	429a      	cmp	r2, r3
 8005494:	d91c      	bls.n	80054d0 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f043 0220 	orr.w	r2, r3, #32
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	619a      	str	r2, [r3, #24]
          }
          break;
 80054a2:	e015      	b.n	80054d0 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	3303      	adds	r3, #3
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80054ae:	89fa      	ldrh	r2, [r7, #14]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d90a      	bls.n	80054d4 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	619a      	str	r2, [r3, #24]
          }
          break;
 80054ca:	e003      	b.n	80054d4 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <USB_HC_StartXfer+0x1da>
          break;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <USB_HC_StartXfer+0x1da>
          break;
 80054d4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68d9      	ldr	r1, [r3, #12]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	785a      	ldrb	r2, [r3, #1]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fc23 	bl	8004d30 <USB_WritePacket>
    }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	1ff80000 	.word	0x1ff80000
 80054f8:	200000b0 	.word	0x200000b0

080054fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	b29b      	uxth	r3, r3
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0c9b      	lsrs	r3, r3, #18
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <USB_HC_Halt+0x3a>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d16c      	bne.n	8005632 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	440a      	add	r2, r1
 800556e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005576:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d143      	bne.n	800560c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4413      	add	r3, r2
 800558c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	440a      	add	r2, r1
 800559a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800559e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055e2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	3301      	adds	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055f0:	d81d      	bhi.n	800562e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005608:	d0ec      	beq.n	80055e4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800560a:	e080      	b.n	800570e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	440a      	add	r2, r1
 8005622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800562a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800562c:	e06f      	b.n	800570e <USB_HC_Halt+0x1f0>
          break;
 800562e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005630:	e06d      	b.n	800570e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	440a      	add	r2, r1
 8005648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800564c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005650:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d143      	bne.n	80056ea <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4413      	add	r3, r2
 800566a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	440a      	add	r2, r1
 8005678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800567c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005680:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	4413      	add	r3, r2
 800568a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	440a      	add	r2, r1
 8005698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056c0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	3301      	adds	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ce:	d81d      	bhi.n	800570c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e6:	d0ec      	beq.n	80056c2 <USB_HC_Halt+0x1a4>
 80056e8:	e011      	b.n	800570e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e000      	b.n	800570e <USB_HC_Halt+0x1f0>
          break;
 800570c:	bf00      	nop
    }
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff fa7c 	bl	8004c2a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005732:	2110      	movs	r1, #16
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fab3 	bl	8004ca0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fad6 	bl	8004cec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	e01f      	b.n	8005786 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800575c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005764:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800576c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	3301      	adds	r3, #1
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b0f      	cmp	r3, #15
 800578a:	d9dc      	bls.n	8005746 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800578c:	2300      	movs	r3, #0
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	e034      	b.n	80057fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	461a      	mov	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	3301      	adds	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057d8:	d80c      	bhi.n	80057f4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f0:	d0ec      	beq.n	80057cc <USB_StopHost+0xb0>
 80057f2:	e000      	b.n	80057f6 <USB_StopHost+0xda>
        break;
 80057f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3301      	adds	r3, #1
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b0f      	cmp	r3, #15
 8005800:	d9c7      	bls.n	8005792 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005808:	461a      	mov	r2, r3
 800580a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800580e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005816:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff f9f5 	bl	8004c08 <USB_EnableGlobalInt>

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005828:	b590      	push	{r4, r7, lr}
 800582a:	b08b      	sub	sp, #44	; 0x2c
 800582c:	af04      	add	r7, sp, #16
 800582e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8005838:	2300      	movs	r3, #0
 800583a:	2201      	movs	r2, #1
 800583c:	2101      	movs	r1, #1
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 ff93 	bl	800776a <USBH_FindInterface>
 8005844:	4603      	mov	r3, r0
 8005846:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8005848:	7c7b      	ldrb	r3, [r7, #17]
 800584a:	2bff      	cmp	r3, #255	; 0xff
 800584c:	d101      	bne.n	8005852 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800584e:	2302      	movs	r3, #2
 8005850:	e1a5      	b.n	8005b9e <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8005858:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800585c:	f003 fd64 	bl	8009328 <malloc>
 8005860:	4603      	mov	r3, r0
 8005862:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 8005874:	2302      	movs	r3, #2
 8005876:	e192      	b.n	8005b9e <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8005878:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800587c:	2100      	movs	r1, #0
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f003 fd62 	bl	8009348 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fc0e 	bl	80060a6 <USBH_AUDIO_FindAudioStreamingIN>
 800588a:	4603      	mov	r3, r0
 800588c:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fcc8 	bl	8006224 <USBH_AUDIO_FindAudioStreamingOUT>
 8005894:	4603      	mov	r3, r0
 8005896:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8005898:	7afb      	ldrb	r3, [r7, #11]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d104      	bne.n	80058a8 <USBH_AUDIO_InterfaceInit+0x80>
 800589e:	7abb      	ldrb	r3, [r7, #10]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d101      	bne.n	80058a8 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80058a4:	2302      	movs	r3, #2
 80058a6:	e17a      	b.n	8005b9e <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]
 80058ac:	e0c6      	b.n	8005a3c <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 80058ae:	7dfa      	ldrb	r2, [r7, #23]
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	440b      	add	r3, r1
 80058bc:	333e      	adds	r3, #62	; 0x3e
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d156      	bne.n	8005972 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 80058c4:	7dfa      	ldrb	r2, [r7, #23]
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	440b      	add	r3, r1
 80058d2:	333a      	adds	r3, #58	; 0x3a
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	8aba      	ldrh	r2, [r7, #20]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d24a      	bcs.n	8005972 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 80058dc:	7dfa      	ldrb	r2, [r7, #23]
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	440b      	add	r3, r1
 80058ea:	333a      	adds	r3, #58	; 0x3a
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 80058f0:	7dfa      	ldrb	r2, [r7, #23]
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	440b      	add	r3, r1
 80058fe:	333d      	adds	r3, #61	; 0x3d
 8005900:	781a      	ldrb	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8005908:	7dfa      	ldrb	r2, [r7, #23]
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	440b      	add	r3, r1
 8005916:	333c      	adds	r3, #60	; 0x3c
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8005920:	7dfa      	ldrb	r2, [r7, #23]
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	440b      	add	r3, r1
 800592e:	3338      	adds	r3, #56	; 0x38
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8005938:	7dfa      	ldrb	r2, [r7, #23]
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	440b      	add	r3, r1
 8005946:	333a      	adds	r3, #58	; 0x3a
 8005948:	881a      	ldrh	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8005950:	7dfa      	ldrb	r2, [r7, #23]
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	440b      	add	r3, r1
 800595e:	3340      	adds	r3, #64	; 0x40
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b2da      	uxtb	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8005972:	7dfa      	ldrb	r2, [r7, #23]
 8005974:	68f9      	ldr	r1, [r7, #12]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	440b      	add	r3, r1
 8005980:	330c      	adds	r3, #12
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d156      	bne.n	8005a36 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8005988:	7dfa      	ldrb	r2, [r7, #23]
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	440b      	add	r3, r1
 8005996:	3308      	adds	r3, #8
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	8a7a      	ldrh	r2, [r7, #18]
 800599c:	429a      	cmp	r2, r3
 800599e:	d24a      	bcs.n	8005a36 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 80059a0:	7dfa      	ldrb	r2, [r7, #23]
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	440b      	add	r3, r1
 80059ae:	3308      	adds	r3, #8
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 80059b4:	7dfa      	ldrb	r2, [r7, #23]
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	440b      	add	r3, r1
 80059c2:	330b      	adds	r3, #11
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 80059cc:	7dfa      	ldrb	r2, [r7, #23]
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	440b      	add	r3, r1
 80059da:	330a      	adds	r3, #10
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 80059e4:	7dfa      	ldrb	r2, [r7, #23]
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	440b      	add	r3, r1
 80059f2:	3306      	adds	r3, #6
 80059f4:	781a      	ldrb	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 80059fc:	7dfa      	ldrb	r2, [r7, #23]
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	440b      	add	r3, r1
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	881a      	ldrh	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8005a14:	7dfa      	ldrb	r2, [r7, #23]
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	440b      	add	r3, r1
 8005a22:	3340      	adds	r3, #64	; 0x40
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	75fb      	strb	r3, [r7, #23]
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	f67f af35 	bls.w	80058ae <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fcac 	bl	80063a2 <USBH_AUDIO_FindHIDControl>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fd24 	bl	80064a6 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d12e      	bne.n	8005ac6 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 ff67 	bl	800693c <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f003 f8ca 	bl	8008c10 <USBH_AllocPipe>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8005aa4:	9202      	str	r2, [sp, #8]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	9201      	str	r2, [sp, #4]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	4623      	mov	r3, r4
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f003 f87e 	bl	8008bb2 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005abc:	2200      	movs	r2, #0
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f003 fb80 	bl	80091c6 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d12e      	bne.n	8005b2e <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 feab 	bl	800682c <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f003 f896 	bl	8008c10 <USBH_AllocPipe>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	9201      	str	r2, [sp, #4]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	4623      	mov	r3, r4
 8005b16:	4602      	mov	r2, r0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f003 f84a 	bl	8008bb2 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005b24:	2200      	movs	r2, #0
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f003 fb4c 	bl	80091c6 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d12b      	bne.n	8005b90 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f003 f865 	bl	8008c10 <USBH_AllocPipe>
 8005b46:	4603      	mov	r3, r0
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8005b6e:	9202      	str	r2, [sp, #8]
 8005b70:	2203      	movs	r2, #3
 8005b72:	9201      	str	r2, [sp, #4]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	4623      	mov	r3, r4
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f003 f819 	bl	8008bb2 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005b86:	2200      	movs	r2, #0
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f003 fb1b 	bl	80091c6 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd90      	pop	{r4, r7, pc}

08005ba6 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d011      	beq.n	8005be6 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f003 f810 	bl	8008bf0 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f003 f83b 	bl	8008c54 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d011      	beq.n	8005c14 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f002 fff9 	bl	8008bf0 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f003 f824 	bl	8008c54 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d011      	beq.n	8005c42 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f002 ffe2 	bl	8008bf0 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f003 f80d 	bl	8008c54 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00b      	beq.n	8005c66 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f003 fb6e 	bl	8009338 <free>
    phost->pActiveClass->pData = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005c62:	2200      	movs	r2, #0
 8005c64:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c82:	2301      	movs	r3, #1
 8005c84:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005c86:	2301      	movs	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	2b06      	cmp	r3, #6
 8005c92:	f200 80be 	bhi.w	8005e12 <USBH_AUDIO_ClassRequest+0x1a2>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <USBH_AUDIO_ClassRequest+0x2c>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cb9 	.word	0x08005cb9
 8005ca0:	08005dfb 	.word	0x08005dfb
 8005ca4:	08005cb9 	.word	0x08005cb9
 8005ca8:	08005cfb 	.word	0x08005cfb
 8005cac:	08005d73 	.word	0x08005d73
 8005cb0:	08005db7 	.word	0x08005db7
 8005cb4:	08005d5f 	.word	0x08005d5f
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d117      	bne.n	8005cf2 <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f002 fb1e 	bl	800830e <USBH_SetInterface>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d103      	bne.n	8005ce4 <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2204      	movs	r2, #4
 8005ce0:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005ce2:	e098      	b.n	8005e16 <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	f040 8095 	bne.w	8005e16 <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 8005cec:	2302      	movs	r3, #2
 8005cee:	75fb      	strb	r3, [r7, #23]
    break;
 8005cf0:	e091      	b.n	8005e16 <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	701a      	strb	r2, [r3, #0]
    break;
 8005cf8:	e08d      	b.n	8005e16 <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d125      	bne.n	8005d50 <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f002 fafd 	bl	800830e <USBH_SetInterface>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d112      	bne.n	8005d44 <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2207      	movs	r2, #7
 8005d22:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2206      	movs	r2, #6
 8005d28:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005d42:	e06a      	b.n	8005e1a <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d167      	bne.n	8005e1a <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	75fb      	strb	r3, [r7, #23]
    break;
 8005d4e:	e064      	b.n	8005e1a <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2207      	movs	r2, #7
 8005d54:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2206      	movs	r2, #6
 8005d5a:	705a      	strb	r2, [r3, #1]
    break;
 8005d5c:	e05d      	b.n	8005e1a <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f938 	bl	8005fd4 <USBH_AUDIO_HandleCSRequest>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d159      	bne.n	8005e1e <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2205      	movs	r2, #5
 8005d6e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005d70:	e055      	b.n	8005e1e <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d118      	bne.n	8005dae <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f002 fabf 	bl	800830e <USBH_SetInterface>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2206      	movs	r2, #6
 8005d9e:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005da0:	e03f      	b.n	8005e22 <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d13c      	bne.n	8005e22 <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 8005da8:	2302      	movs	r3, #2
 8005daa:	75fb      	strb	r3, [r7, #23]
    break;
 8005dac:	e039      	b.n	8005e22 <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2206      	movs	r2, #6
 8005db2:	701a      	strb	r2, [r3, #0]
    break;
 8005db4:	e035      	b.n	8005e22 <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d118      	bne.n	8005df2 <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f002 fa9d 	bl	800830e <USBH_SetInterface>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d103      	bne.n	8005de6 <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2202      	movs	r2, #2
 8005de2:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005de4:	e01f      	b.n	8005e26 <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d11c      	bne.n	8005e26 <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 8005dec:	2302      	movs	r3, #2
 8005dee:	75fb      	strb	r3, [r7, #23]
    break;
 8005df0:	e019      	b.n	8005e26 <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2202      	movs	r2, #2
 8005df6:	701a      	strb	r2, [r3, #0]
    break;
 8005df8:	e015      	b.n	8005e26 <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8005e06:	2102      	movs	r1, #2
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
    status  = USBH_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005e10:	e00a      	b.n	8005e28 <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 8005e12:	bf00      	nop
 8005e14:	e008      	b.n	8005e28 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005e16:	bf00      	nop
 8005e18:	e006      	b.n	8005e28 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005e1a:	bf00      	nop
 8005e1c:	e004      	b.n	8005e28 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005e26:	bf00      	nop
  }
  return status;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
 8005e40:	4613      	mov	r3, r2
 8005e42:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005e52:	2301      	movs	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	3b04      	subs	r3, #4
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	f200 80aa 	bhi.w	8005fb6 <USBH_AUDIO_CSRequest+0x182>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <USBH_AUDIO_CSRequest+0x34>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005ec5 	.word	0x08005ec5
 8005e6c:	08005f0b 	.word	0x08005f0b
 8005e70:	08005e7d 	.word	0x08005e7d
 8005e74:	08005f6b 	.word	0x08005f6b
 8005e78:	08005fb1 	.word	0x08005fb1
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	2302      	movs	r3, #2
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	78bb      	ldrb	r3, [r7, #2]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	2302      	movs	r3, #2
 8005e88:	2106      	movs	r1, #6
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fe94 	bl	8006bb8 <USBH_AC_GetCur>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	f000 808f 	beq.w	8005fba <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005eae:	3302      	adds	r3, #2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8005eba:	897a      	ldrh	r2, [r7, #10]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 8005ec2:	e07a      	b.n	8005fba <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	78bb      	ldrb	r3, [r7, #2]
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	2302      	movs	r3, #2
 8005ed0:	2106      	movs	r1, #6
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 f82c 	bl	8006f30 <USBH_AC_GetMin>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d06d      	beq.n	8005fbe <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2205      	movs	r2, #5
 8005ee6:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	4313      	orrs	r3, r2
 8005efe:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8005f00:	897a      	ldrh	r2, [r7, #10]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8005f08:	e059      	b.n	8005fbe <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	78bb      	ldrb	r3, [r7, #2]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	2302      	movs	r3, #2
 8005f16:	2106      	movs	r1, #6
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fee1 	bl	8006ce0 <USBH_AC_GetMax>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d04c      	beq.n	8005fc2 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2207      	movs	r2, #7
 8005f2c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	4313      	orrs	r3, r2
 8005f44:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8005f46:	897a      	ldrh	r2, [r7, #10]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d231      	bcs.n	8005fc2 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8005f64:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8005f68:	e02b      	b.n	8005fc2 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	78bb      	ldrb	r3, [r7, #2]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2302      	movs	r3, #2
 8005f76:	2106      	movs	r1, #6
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 ff45 	bl	8006e08 <USBH_AC_GetRes>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d01e      	beq.n	8005fc6 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8005fa6:	89ba      	ldrh	r2, [r7, #12]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 8005fae:	e00a      	b.n	8005fc6 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fb4:	e008      	b.n	8005fc8 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8005fb6:	bf00      	nop
 8005fb8:	e006      	b.n	8005fc8 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005fba:	bf00      	nop
 8005fbc:	e004      	b.n	8005fc8 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005fbe:	bf00      	nop
 8005fc0:	e002      	b.n	8005fc8 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005fc6:	bf00      	nop
  }
  return status;
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop

08005fd4 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ff19 	bl	8005e34 <USBH_AUDIO_CSRequest>
 8006002:	4603      	mov	r3, r0
 8006004:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d01c      	beq.n	8006046 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8006012:	2b01      	cmp	r3, #1
 8006014:	d10c      	bne.n	8006030 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
 800602e:	e007      	b.n	8006040 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8006036:	3b01      	subs	r3, #1
 8006038:	b2da      	uxtb	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2206      	movs	r2, #6
 8006044:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800606c:	2b01      	cmp	r3, #1
 800606e:	d102      	bne.n	8006076 <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f8db 	bl	800722c <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800607c:	2b01      	cmp	r3, #1
 800607e:	d102      	bne.n	8006086 <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 f811 	bl	80070a8 <USBH_AUDIO_InputStream>
  }

  return status;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 80060ae:	2302      	movs	r3, #2
 80060b0:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]
 80060c4:	e09e      	b.n	8006204 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	211a      	movs	r1, #26
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 3347 	addw	r3, r3, #839	; 0x347
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	f040 8090 	bne.w	80061fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	211a      	movs	r1, #26
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80060ee:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	f040 8084 	bne.w	80061fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	211a      	movs	r1, #26
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	b25b      	sxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	da77      	bge.n	80061fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	211a      	movs	r1, #26
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	4413      	add	r3, r2
 800611a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800611e:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8006120:	2b00      	cmp	r3, #0
 8006122:	d06c      	beq.n	80061fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	7bba      	ldrb	r2, [r7, #14]
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	201a      	movs	r0, #26
 800612c:	fb00 f303 	mul.w	r3, r0, r3
 8006130:	440b      	add	r3, r1
 8006132:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006136:	7818      	ldrb	r0, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	440b      	add	r3, r1
 8006144:	3306      	adds	r3, #6
 8006146:	4602      	mov	r2, r0
 8006148:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	7bba      	ldrb	r2, [r7, #14]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	201a      	movs	r0, #26
 8006152:	fb00 f303 	mul.w	r3, r0, r3
 8006156:	440b      	add	r3, r1
 8006158:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800615c:	8818      	ldrh	r0, [r3, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	440b      	add	r3, r1
 800616a:	3308      	adds	r3, #8
 800616c:	4602      	mov	r2, r0
 800616e:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	7bba      	ldrb	r2, [r7, #14]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	201a      	movs	r0, #26
 8006178:	fb00 f303 	mul.w	r3, r0, r3
 800617c:	440b      	add	r3, r1
 800617e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006182:	7818      	ldrb	r0, [r3, #0]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	440b      	add	r3, r1
 8006190:	330b      	adds	r3, #11
 8006192:	4602      	mov	r2, r0
 8006194:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	7bba      	ldrb	r2, [r7, #14]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	201a      	movs	r0, #26
 800619e:	fb00 f303 	mul.w	r3, r0, r3
 80061a2:	440b      	add	r3, r1
 80061a4:	f203 3345 	addw	r3, r3, #837	; 0x345
 80061a8:	7818      	ldrb	r0, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	440b      	add	r3, r1
 80061b6:	330a      	adds	r3, #10
 80061b8:	4602      	mov	r2, r0
 80061ba:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	211a      	movs	r1, #26
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 3352 	addw	r3, r3, #850	; 0x352
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	7bba      	ldrb	r2, [r7, #14]
 80061d0:	b298      	uxth	r0, r3
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	440b      	add	r3, r1
 80061de:	330e      	adds	r3, #14
 80061e0:	4602      	mov	r2, r0
 80061e2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 80061e4:	7bba      	ldrb	r2, [r7, #14]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	440b      	add	r3, r1
 80061f2:	330c      	adds	r3, #12
 80061f4:	2201      	movs	r2, #1
 80061f6:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	3301      	adds	r3, #1
 80061fc:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	3301      	adds	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b09      	cmp	r3, #9
 8006208:	f67f af5d 	bls.w	80060c6 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006216:	7b7b      	ldrb	r3, [r7, #13]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 800622c:	2302      	movs	r3, #2
 800622e:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	e09e      	b.n	8006382 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	211a      	movs	r1, #26
 800624a:	fb01 f303 	mul.w	r3, r1, r3
 800624e:	4413      	add	r3, r2
 8006250:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b01      	cmp	r3, #1
 8006258:	f040 8090 	bne.w	800637c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	211a      	movs	r1, #26
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	4413      	add	r3, r2
 8006268:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800626c:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800626e:	2b02      	cmp	r3, #2
 8006270:	f040 8084 	bne.w	800637c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	211a      	movs	r1, #26
 800627a:	fb01 f303 	mul.w	r3, r1, r3
 800627e:	4413      	add	r3, r2
 8006280:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	b25b      	sxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	db77      	blt.n	800637c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	211a      	movs	r1, #26
 8006292:	fb01 f303 	mul.w	r3, r1, r3
 8006296:	4413      	add	r3, r2
 8006298:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800629c:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d06c      	beq.n	800637c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	7bba      	ldrb	r2, [r7, #14]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	201a      	movs	r0, #26
 80062aa:	fb00 f303 	mul.w	r3, r0, r3
 80062ae:	440b      	add	r3, r1
 80062b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062b4:	7818      	ldrb	r0, [r3, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	440b      	add	r3, r1
 80062c2:	3338      	adds	r3, #56	; 0x38
 80062c4:	4602      	mov	r2, r0
 80062c6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	7bba      	ldrb	r2, [r7, #14]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	201a      	movs	r0, #26
 80062d0:	fb00 f303 	mul.w	r3, r0, r3
 80062d4:	440b      	add	r3, r1
 80062d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062da:	8818      	ldrh	r0, [r3, #0]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	440b      	add	r3, r1
 80062e8:	333a      	adds	r3, #58	; 0x3a
 80062ea:	4602      	mov	r2, r0
 80062ec:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	7bba      	ldrb	r2, [r7, #14]
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	201a      	movs	r0, #26
 80062f6:	fb00 f303 	mul.w	r3, r0, r3
 80062fa:	440b      	add	r3, r1
 80062fc:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006300:	7818      	ldrb	r0, [r3, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	440b      	add	r3, r1
 800630e:	333d      	adds	r3, #61	; 0x3d
 8006310:	4602      	mov	r2, r0
 8006312:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	7bba      	ldrb	r2, [r7, #14]
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	201a      	movs	r0, #26
 800631c:	fb00 f303 	mul.w	r3, r0, r3
 8006320:	440b      	add	r3, r1
 8006322:	f203 3345 	addw	r3, r3, #837	; 0x345
 8006326:	7818      	ldrb	r0, [r3, #0]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	440b      	add	r3, r1
 8006334:	333c      	adds	r3, #60	; 0x3c
 8006336:	4602      	mov	r2, r0
 8006338:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	211a      	movs	r1, #26
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	4413      	add	r3, r2
 8006346:	f203 3352 	addw	r3, r3, #850	; 0x352
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	7bba      	ldrb	r2, [r7, #14]
 800634e:	b298      	uxth	r0, r3
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	440b      	add	r3, r1
 800635c:	3340      	adds	r3, #64	; 0x40
 800635e:	4602      	mov	r2, r0
 8006360:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8006362:	7bba      	ldrb	r2, [r7, #14]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	440b      	add	r3, r1
 8006370:	333e      	adds	r3, #62	; 0x3e
 8006372:	2201      	movs	r2, #1
 8006374:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	3301      	adds	r3, #1
 800637a:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	3301      	adds	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b09      	cmp	r3, #9
 8006386:	f67f af5d 	bls.w	8006244 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006394:	7b7b      	ldrb	r3, [r7, #13]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 80063aa:	2302      	movs	r3, #2
 80063ac:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 80063b8:	23ff      	movs	r3, #255	; 0xff
 80063ba:	2201      	movs	r2, #1
 80063bc:	2101      	movs	r1, #1
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 f9d3 	bl	800776a <USBH_FindInterface>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2bff      	cmp	r3, #255	; 0xff
 80063cc:	d002      	beq.n	80063d4 <USBH_AUDIO_FindHIDControl+0x32>
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	2b09      	cmp	r3, #9
 80063d2:	d901      	bls.n	80063d8 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 80063d4:	2302      	movs	r3, #2
 80063d6:	e062      	b.n	800649e <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80063d8:	2300      	movs	r3, #0
 80063da:	73fb      	strb	r3, [r7, #15]
 80063dc:	e05b      	b.n	8006496 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	211a      	movs	r1, #26
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 3347 	addw	r3, r3, #839	; 0x347
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d14d      	bne.n	8006490 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	211a      	movs	r1, #26
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	4413      	add	r3, r2
 8006400:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006404:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006406:	2b00      	cmp	r3, #0
 8006408:	d042      	beq.n	8006490 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	211a      	movs	r1, #26
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
 8006416:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b25b      	sxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	da36      	bge.n	8006490 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	211a      	movs	r1, #26
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	4413      	add	r3, r2
 800642e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006432:	781a      	ldrb	r2, [r3, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	211a      	movs	r1, #26
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	4413      	add	r3, r2
 8006446:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800644a:	881a      	ldrh	r2, [r3, #0]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	211a      	movs	r1, #26
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006462:	781a      	ldrb	r2, [r3, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	211a      	movs	r1, #26
 8006470:	fb01 f303 	mul.w	r3, r1, r3
 8006474:	4413      	add	r3, r2
 8006476:	f203 3352 	addw	r3, r3, #850	; 0x352
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73bb      	strb	r3, [r7, #14]
        break;
 800648e:	e005      	b.n	800649c <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	3301      	adds	r3, #1
 8006494:	73fb      	strb	r3, [r7, #15]
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	2b09      	cmp	r3, #9
 800649a:	d9a0      	bls.n	80063de <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 800649c:	7bbb      	ldrb	r3, [r7, #14]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b088      	sub	sp, #32
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	331c      	adds	r3, #28
 80064c8:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 80064ca:	2309      	movs	r3, #9
 80064cc:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 80064ee:	e03d      	b.n	800656c <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	4619      	mov	r1, r3
 80064f6:	69b8      	ldr	r0, [r7, #24]
 80064f8:	f002 f8f5 	bl	80086e6 <USBH_GetNextDesc>
 80064fc:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	2b04      	cmp	r3, #4
 8006504:	d002      	beq.n	800650c <USBH_AUDIO_ParseCSDescriptors+0x66>
 8006506:	2b24      	cmp	r3, #36	; 0x24
 8006508:	d00f      	beq.n	800652a <USBH_AUDIO_ParseCSDescriptors+0x84>
 800650a:	e02e      	b.n	800656a <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	789b      	ldrb	r3, [r3, #2]
 8006510:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	78db      	ldrb	r3, [r3, #3]
 8006516:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8006518:	7bfa      	ldrb	r2, [r7, #15]
 800651a:	7dbb      	ldrb	r3, [r7, #22]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 f969 	bl	80077f6 <USBH_FindInterfaceIndex>
 8006524:	4603      	mov	r3, r0
 8006526:	75fb      	strb	r3, [r7, #23]
        break;
 8006528:	e020      	b.n	800656c <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006530:	7dba      	ldrb	r2, [r7, #22]
 8006532:	429a      	cmp	r2, r3
 8006534:	d81a      	bhi.n	800656c <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	2bff      	cmp	r3, #255	; 0xff
 800653a:	d002      	beq.n	8006542 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	2b09      	cmp	r3, #9
 8006540:	d902      	bls.n	8006548 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 8006542:	2302      	movs	r3, #2
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e00f      	b.n	8006568 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	211a      	movs	r1, #26
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	4413      	add	r3, r2
 800655a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4619      	mov	r1, r3
 8006564:	f000 f80e 	bl	8006584 <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 8006568:	e000      	b.n	800656c <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 800656a:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 8006572:	89bb      	ldrh	r3, [r7, #12]
 8006574:	429a      	cmp	r2, r3
 8006576:	d8bb      	bhi.n	80064f0 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8006578:	7ffb      	ldrb	r3, [r7, #31]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	460b      	mov	r3, r1
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d163      	bne.n	8006660 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3302      	adds	r3, #2
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	3b01      	subs	r3, #1
 80065a0:	2b05      	cmp	r3, #5
 80065a2:	f200 8081 	bhi.w	80066a8 <ParseCSDescriptors+0x124>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <ParseCSDescriptors+0x28>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065c5 	.word	0x080065c5
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	080065e9 	.word	0x080065e9
 80065b8:	08006643 	.word	0x08006643
 80065bc:	08006625 	.word	0x08006625
 80065c0:	08006607 	.word	0x08006607
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
        break;
 80065ca:	e070      	b.n	80066ae <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	b291      	uxth	r1, r2
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	605a      	str	r2, [r3, #4]
        break;
 80065e6:	e062      	b.n	80066ae <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	b291      	uxth	r1, r2
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	3304      	adds	r3, #4
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	605a      	str	r2, [r3, #4]
        break;
 8006604:	e053      	b.n	80066ae <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	b291      	uxth	r1, r2
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	3308      	adds	r3, #8
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	605a      	str	r2, [r3, #4]
        break;
 8006622:	e044      	b.n	80066ae <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	b291      	uxth	r1, r2
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	3310      	adds	r3, #16
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	605a      	str	r2, [r3, #4]
        break;
 8006640:	e035      	b.n	80066ae <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	b291      	uxth	r1, r2
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	330c      	adds	r3, #12
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	605a      	str	r2, [r3, #4]
        break;
 800665e:	e026      	b.n	80066ae <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d122      	bne.n	80066ac <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3302      	adds	r3, #2
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d002      	beq.n	8006676 <ParseCSDescriptors+0xf2>
 8006670:	2b02      	cmp	r3, #2
 8006672:	d00a      	beq.n	800668a <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8006674:	e01b      	b.n	80066ae <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	330a      	adds	r3, #10
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4413      	add	r3, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]
          break;
 8006688:	e011      	b.n	80066ae <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	b291      	uxth	r1, r2
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	330a      	adds	r3, #10
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	609a      	str	r2, [r3, #8]
          break;
 80066a6:	e002      	b.n	80066ae <ParseCSDescriptors+0x12a>
        break;
 80066a8:	bf00      	nop
 80066aa:	e000      	b.n	80066ae <ParseCSDescriptors+0x12a>
      }
    }
 80066ac:	bf00      	nop
  }

  return USBH_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
 80066d6:	e01b      	b.n	8006710 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	3322      	adds	r3, #34	; 0x22
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	791b      	ldrb	r3, [r3, #4]
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d10e      	bne.n	800670a <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	3322      	adds	r3, #34	; 0x22
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	78db      	ldrb	r3, [r3, #3]
 80066fa:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	041a      	lsls	r2, r3, #16
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	4313      	orrs	r3, r2
 8006704:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006708:	e089      	b.n	800681e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	3301      	adds	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	b29a      	uxth	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 800671a:	429a      	cmp	r2, r3
 800671c:	d3dc      	bcc.n	80066d8 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
 8006722:	e026      	b.n	8006772 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	3326      	adds	r3, #38	; 0x26
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	795b      	ldrb	r3, [r3, #5]
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	429a      	cmp	r2, r3
 8006736:	d009      	beq.n	800674c <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	3326      	adds	r3, #38	; 0x26
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	429a      	cmp	r2, r3
 800674a:	d10f      	bne.n	800676c <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	3326      	adds	r3, #38	; 0x26
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	78db      	ldrb	r3, [r3, #3]
 800675a:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	461a      	mov	r2, r3
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	4313      	orrs	r3, r2
 8006766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800676a:	e058      	b.n	800681e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	3301      	adds	r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	b29a      	uxth	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800677c:	429a      	cmp	r2, r3
 800677e:	d3d1      	bcc.n	8006724 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]
 8006784:	e01c      	b.n	80067c0 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	332a      	adds	r3, #42	; 0x2a
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	795b      	ldrb	r3, [r3, #5]
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	429a      	cmp	r2, r3
 8006798:	d10f      	bne.n	80067ba <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	332a      	adds	r3, #42	; 0x2a
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	78db      	ldrb	r3, [r3, #3]
 80067a8:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	461a      	mov	r2, r3
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80067b8:	e031      	b.n	800681e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	3301      	adds	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d3db      	bcc.n	8006786 <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
 80067d2:	e01c      	b.n	800680e <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	331e      	adds	r3, #30
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	79db      	ldrb	r3, [r3, #7]
 80067e2:	78fa      	ldrb	r2, [r7, #3]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d10f      	bne.n	8006808 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	331e      	adds	r3, #30
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	78db      	ldrb	r3, [r3, #3]
 80067f6:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	461a      	mov	r2, r3
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	4313      	orrs	r3, r2
 8006802:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006806:	e00a      	b.n	800681e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	3301      	adds	r3, #1
 800680c:	73fb      	strb	r3, [r7, #15]
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	b29a      	uxth	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8006818:	429a      	cmp	r2, r3
 800681a:	d3db      	bcc.n	80067d4 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
	...

0800682c <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006846:	2300      	movs	r3, #0
 8006848:	75bb      	strb	r3, [r7, #22]
 800684a:	e02c      	b.n	80068a6 <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 800684c:	7dbb      	ldrb	r3, [r7, #22]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	331a      	adds	r3, #26
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	791b      	ldrb	r3, [r3, #4]
 800685a:	4619      	mov	r1, r3
 800685c:	7dbb      	ldrb	r3, [r7, #22]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	331a      	adds	r3, #26
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	795b      	ldrb	r3, [r3, #5]
 800686a:	b29b      	uxth	r3, r3
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	b29b      	uxth	r3, r3
 8006870:	430b      	orrs	r3, r1
 8006872:	f240 2201 	movw	r2, #513	; 0x201
 8006876:	4293      	cmp	r3, r2
 8006878:	d112      	bne.n	80068a0 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800687a:	7dbb      	ldrb	r3, [r7, #22]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	331a      	adds	r3, #26
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800688a:	7dbb      	ldrb	r3, [r7, #22]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	331a      	adds	r3, #26
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	79da      	ldrb	r2, [r3, #7]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 800689e:	e009      	b.n	80068b4 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80068a0:	7dbb      	ldrb	r3, [r7, #22]
 80068a2:	3301      	adds	r3, #1
 80068a4:	75bb      	strb	r3, [r7, #22]
 80068a6:	7dbb      	ldrb	r3, [r7, #22]
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d3cb      	bcc.n	800684c <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff feff 	bl	80066bc <USBH_AUDIO_FindLinkedUnit>
 80068be:	60f8      	str	r0, [r7, #12]

    if (!value)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 80068c6:	2302      	movs	r3, #2
 80068c8:	e034      	b.n	8006934 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	0a1b      	lsrs	r3, r3, #8
 80068d2:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80068da:	7abb      	ldrb	r3, [r7, #10]
 80068dc:	3b03      	subs	r3, #3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d81e      	bhi.n	8006920 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	08006917 	.word	0x08006917
 80068ec:	08006903 	.word	0x08006903
 80068f0:	0800690d 	.word	0x0800690d
 80068f4:	080068f9 	.word	0x080068f9
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	7afa      	ldrb	r2, [r7, #11]
 80068fc:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8006900:	e011      	b.n	8006926 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	7afa      	ldrb	r2, [r7, #11]
 8006906:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 800690a:	e00c      	b.n	8006926 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	7afa      	ldrb	r2, [r7, #11]
 8006910:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8006914:	e007      	b.n	8006926 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	7afa      	ldrb	r2, [r7, #11]
 800691a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 800691e:	e002      	b.n	8006926 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 8006920:	2302      	movs	r3, #2
 8006922:	757b      	strb	r3, [r7, #21]
        break;
 8006924:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006926:	7abb      	ldrb	r3, [r7, #10]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d002      	beq.n	8006932 <USBH_AUDIO_BuildMicrophonePath+0x106>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1c0      	bne.n	80068b4 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8006932:	7d7b      	ldrb	r3, [r7, #21]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8006944:	2300      	movs	r3, #0
 8006946:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006956:	2300      	movs	r3, #0
 8006958:	757b      	strb	r3, [r7, #21]
 800695a:	e02c      	b.n	80069b6 <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 800695c:	7d7b      	ldrb	r3, [r7, #21]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	331a      	adds	r3, #26
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	791b      	ldrb	r3, [r3, #4]
 800696a:	4619      	mov	r1, r3
 800696c:	7d7b      	ldrb	r3, [r7, #21]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	331a      	adds	r3, #26
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	795b      	ldrb	r3, [r3, #5]
 800697a:	b29b      	uxth	r3, r3
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	b29b      	uxth	r3, r3
 8006980:	430b      	orrs	r3, r1
 8006982:	f240 1201 	movw	r2, #257	; 0x101
 8006986:	4293      	cmp	r3, r2
 8006988:	d112      	bne.n	80069b0 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800698a:	7d7b      	ldrb	r3, [r7, #21]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	331a      	adds	r3, #26
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	78db      	ldrb	r3, [r3, #3]
 8006998:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800699a:	7d7b      	ldrb	r3, [r7, #21]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	331a      	adds	r3, #26
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	79da      	ldrb	r2, [r3, #7]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 80069ae:	e009      	b.n	80069c4 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80069b0:	7d7b      	ldrb	r3, [r7, #21]
 80069b2:	3301      	adds	r3, #1
 80069b4:	757b      	strb	r3, [r7, #21]
 80069b6:	7d7b      	ldrb	r3, [r7, #21]
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d3cb      	bcc.n	800695c <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80069c4:	2300      	movs	r3, #0
 80069c6:	75bb      	strb	r3, [r7, #22]
 80069c8:	e011      	b.n	80069ee <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 80069ca:	7dbb      	ldrb	r3, [r7, #22]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	3317      	adds	r3, #23
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	78db      	ldrb	r3, [r3, #3]
 80069d8:	7dfa      	ldrb	r2, [r7, #23]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d104      	bne.n	80069e8 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	7dba      	ldrb	r2, [r7, #22]
 80069e2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 80069e6:	e009      	b.n	80069fc <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80069e8:	7dbb      	ldrb	r3, [r7, #22]
 80069ea:	3301      	adds	r3, #1
 80069ec:	75bb      	strb	r3, [r7, #22]
 80069ee:	7dbb      	ldrb	r3, [r7, #22]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d3e6      	bcc.n	80069ca <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fe5b 	bl	80066bc <USBH_AUDIO_FindLinkedUnit>
 8006a06:	60f8      	str	r0, [r7, #12]

    if (!value)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e053      	b.n	8006aba <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	0c1b      	lsrs	r3, r3, #16
 8006a20:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8006a22:	7afb      	ldrb	r3, [r7, #11]
 8006a24:	3b03      	subs	r3, #3
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d83c      	bhi.n	8006aa4 <USBH_AUDIO_BuildHeadphonePath+0x168>
 8006a2a:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a5f 	.word	0x08006a5f
 8006a34:	08006a4b 	.word	0x08006a4b
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a41 	.word	0x08006a41
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	7dba      	ldrb	r2, [r7, #22]
 8006a44:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8006a48:	e030      	b.n	8006aac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	7dba      	ldrb	r2, [r7, #22]
 8006a4e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 8006a52:	e02b      	b.n	8006aac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	7dba      	ldrb	r2, [r7, #22]
 8006a58:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8006a5c:	e026      	b.n	8006aac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	7dba      	ldrb	r2, [r7, #22]
 8006a62:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8006a66:	7dbb      	ldrb	r3, [r7, #22]
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d818      	bhi.n	8006a9e <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8006a6c:	7dbb      	ldrb	r3, [r7, #22]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	331e      	adds	r3, #30
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	791b      	ldrb	r3, [r3, #4]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	7dbb      	ldrb	r3, [r7, #22]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	331e      	adds	r3, #30
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	795b      	ldrb	r3, [r3, #5]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	430b      	orrs	r3, r1
 8006a92:	f240 1203 	movw	r2, #259	; 0x103
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e00d      	b.n	8006aba <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	753b      	strb	r3, [r7, #20]
        }
        break;
 8006aa2:	e002      	b.n	8006aaa <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	753b      	strb	r3, [r7, #20]
        break;
 8006aa8:	e000      	b.n	8006aac <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 8006aaa:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d002      	beq.n	8006ab8 <USBH_AUDIO_BuildHeadphonePath+0x17c>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1a1      	bne.n	80069fc <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 8006ab8:	7d3b      	ldrb	r3, [r7, #20]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop

08006ac4 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	4608      	mov	r0, r1
 8006ace:	4611      	mov	r1, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	70fb      	strb	r3, [r7, #3]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70bb      	strb	r3, [r7, #2]
 8006ada:	4613      	mov	r3, r2
 8006adc:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	82fb      	strh	r3, [r7, #22]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	82bb      	strh	r3, [r7, #20]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d002      	beq.n	8006b04 <USBH_AC_SetCur+0x40>
 8006afe:	2b06      	cmp	r3, #6
 8006b00:	d018      	beq.n	8006b34 <USBH_AC_SetCur+0x70>
 8006b02:	e035      	b.n	8006b70 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	78db      	ldrb	r3, [r3, #3]
 8006b0a:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	7abb      	ldrb	r3, [r7, #10]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b24:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	827b      	strh	r3, [r7, #18]
      break;
 8006b32:	e020      	b.n	8006b76 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006b34:	78bb      	ldrb	r3, [r7, #2]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	3322      	adds	r3, #34	; 0x22
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	78db      	ldrb	r3, [r3, #3]
 8006b42:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006b44:	2300      	movs	r3, #0
 8006b46:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006b48:	7afb      	ldrb	r3, [r7, #11]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	7abb      	ldrb	r3, [r7, #10]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4313      	orrs	r3, r2
 8006b56:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006b58:	787b      	ldrb	r3, [r7, #1]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b6c:	827b      	strh	r3, [r7, #18]
      break;
 8006b6e:	e002      	b.n	8006b76 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8006b70:	2302      	movs	r3, #2
 8006b72:	747b      	strb	r3, [r7, #17]
      break;
 8006b74:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006b76:	7c7b      	ldrb	r3, [r7, #17]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8006b7c:	7c7b      	ldrb	r3, [r7, #17]
 8006b7e:	e017      	b.n	8006bb0 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2221      	movs	r2, #33	; 0x21
 8006b84:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8afa      	ldrh	r2, [r7, #22]
 8006b90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	8aba      	ldrh	r2, [r7, #20]
 8006b96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8a7a      	ldrh	r2, [r7, #18]
 8006b9c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006ba4:	8a7a      	ldrh	r2, [r7, #18]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f001 fdb7 	bl	800871c <USBH_CtlReq>
 8006bae:	4603      	mov	r3, r0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	70fb      	strb	r3, [r7, #3]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70bb      	strb	r3, [r7, #2]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	82fb      	strh	r3, [r7, #22]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	82bb      	strh	r3, [r7, #20]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	743b      	strb	r3, [r7, #16]
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d039      	beq.n	8006c6e <USBH_AC_GetCur+0xb6>
 8006bfa:	2b06      	cmp	r3, #6
 8006bfc:	d019      	beq.n	8006c32 <USBH_AC_GetCur+0x7a>
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d14a      	bne.n	8006c98 <USBH_AC_GetCur+0xe0>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	78db      	ldrb	r3, [r3, #3]
 8006c08:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006c0e:	7c3b      	ldrb	r3, [r7, #16]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c22:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	827b      	strh	r3, [r7, #18]
      break;
 8006c30:	e035      	b.n	8006c9e <USBH_AC_GetCur+0xe6>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006c32:	78bb      	ldrb	r3, [r7, #2]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	3322      	adds	r3, #34	; 0x22
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	78db      	ldrb	r3, [r3, #3]
 8006c40:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006c46:	7c3b      	ldrb	r3, [r7, #16]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006c56:	787b      	ldrb	r3, [r7, #1]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	4313      	orrs	r3, r2
 8006c66:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c6a:	827b      	strh	r3, [r7, #18]
      break;
 8006c6c:	e017      	b.n	8006c9e <USBH_AC_GetCur+0xe6>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c74:	78db      	ldrb	r3, [r3, #3]
 8006c76:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006c7c:	7c3b      	ldrb	r3, [r7, #16]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c90:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006c92:	2301      	movs	r3, #1
 8006c94:	827b      	strh	r3, [r7, #18]
      break;
 8006c96:	e002      	b.n	8006c9e <USBH_AC_GetCur+0xe6>

    default:
      ret = USBH_FAIL;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	747b      	strb	r3, [r7, #17]
      break;
 8006c9c:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006c9e:	7c7b      	ldrb	r3, [r7, #17]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <USBH_AC_GetCur+0xf0>
  {
    return ret;
 8006ca4:	7c7b      	ldrb	r3, [r7, #17]
 8006ca6:	e017      	b.n	8006cd8 <USBH_AC_GetCur+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	22a1      	movs	r2, #161	; 0xa1
 8006cac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2281      	movs	r2, #129	; 0x81
 8006cb2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8afa      	ldrh	r2, [r7, #22]
 8006cb8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	8aba      	ldrh	r2, [r7, #20]
 8006cbe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8a7a      	ldrh	r2, [r7, #18]
 8006cc4:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006ccc:	8a7a      	ldrh	r2, [r7, #18]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fd23 	bl	800871c <USBH_CtlReq>
 8006cd6:	4603      	mov	r3, r0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	70fb      	strb	r3, [r7, #3]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70bb      	strb	r3, [r7, #2]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	82fb      	strh	r3, [r7, #22]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	82bb      	strh	r3, [r7, #20]
 8006d02:	2300      	movs	r3, #0
 8006d04:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	743b      	strb	r3, [r7, #16]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d039      	beq.n	8006d96 <USBH_AC_GetMax+0xb6>
 8006d22:	2b06      	cmp	r3, #6
 8006d24:	d019      	beq.n	8006d5a <USBH_AC_GetMax+0x7a>
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d14a      	bne.n	8006dc0 <USBH_AC_GetMax+0xe0>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	78db      	ldrb	r3, [r3, #3]
 8006d30:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006d36:	7c3b      	ldrb	r3, [r7, #16]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	4313      	orrs	r3, r2
 8006d44:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d4a:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006d54:	2301      	movs	r3, #1
 8006d56:	827b      	strh	r3, [r7, #18]
      break;
 8006d58:	e035      	b.n	8006dc6 <USBH_AC_GetMax+0xe6>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006d5a:	78bb      	ldrb	r3, [r7, #2]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	3322      	adds	r3, #34	; 0x22
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	78db      	ldrb	r3, [r3, #3]
 8006d68:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006d6e:	7c3b      	ldrb	r3, [r7, #16]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006d7e:	787b      	ldrb	r3, [r7, #1]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006d90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d92:	827b      	strh	r3, [r7, #18]
      break;
 8006d94:	e017      	b.n	8006dc6 <USBH_AC_GetMax+0xe6>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d9c:	78db      	ldrb	r3, [r3, #3]
 8006d9e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006da4:	7c3b      	ldrb	r3, [r7, #16]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db8:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	827b      	strh	r3, [r7, #18]
      break;
 8006dbe:	e002      	b.n	8006dc6 <USBH_AC_GetMax+0xe6>

    default:
      ret = USBH_FAIL;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	747b      	strb	r3, [r7, #17]
      break;
 8006dc4:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006dc6:	7c7b      	ldrb	r3, [r7, #17]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <USBH_AC_GetMax+0xf0>
  {
    return ret;
 8006dcc:	7c7b      	ldrb	r3, [r7, #17]
 8006dce:	e017      	b.n	8006e00 <USBH_AC_GetMax+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	22a1      	movs	r2, #161	; 0xa1
 8006dd4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2283      	movs	r2, #131	; 0x83
 8006dda:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8afa      	ldrh	r2, [r7, #22]
 8006de0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8aba      	ldrh	r2, [r7, #20]
 8006de6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8a7a      	ldrh	r2, [r7, #18]
 8006dec:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006df4:	8a7a      	ldrh	r2, [r7, #18]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fc8f 	bl	800871c <USBH_CtlReq>
 8006dfe:	4603      	mov	r3, r0

}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	4608      	mov	r0, r1
 8006e12:	4611      	mov	r1, r2
 8006e14:	461a      	mov	r2, r3
 8006e16:	4603      	mov	r3, r0
 8006e18:	70fb      	strb	r3, [r7, #3]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70bb      	strb	r3, [r7, #2]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	82fb      	strh	r3, [r7, #22]
 8006e26:	2300      	movs	r3, #0
 8006e28:	82bb      	strh	r3, [r7, #20]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	743b      	strb	r3, [r7, #16]
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d039      	beq.n	8006ebe <USBH_AC_GetRes+0xb6>
 8006e4a:	2b06      	cmp	r3, #6
 8006e4c:	d019      	beq.n	8006e82 <USBH_AC_GetRes+0x7a>
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d14a      	bne.n	8006ee8 <USBH_AC_GetRes+0xe0>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	78db      	ldrb	r3, [r3, #3]
 8006e58:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e5e:	7c3b      	ldrb	r3, [r7, #16]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e72:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	827b      	strh	r3, [r7, #18]
      break;
 8006e80:	e035      	b.n	8006eee <USBH_AC_GetRes+0xe6>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006e82:	78bb      	ldrb	r3, [r7, #2]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	3322      	adds	r3, #34	; 0x22
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	78db      	ldrb	r3, [r3, #3]
 8006e90:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e96:	7c3b      	ldrb	r3, [r7, #16]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006ea6:	787b      	ldrb	r3, [r7, #1]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eba:	827b      	strh	r3, [r7, #18]
      break;
 8006ebc:	e017      	b.n	8006eee <USBH_AC_GetRes+0xe6>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec4:	78db      	ldrb	r3, [r3, #3]
 8006ec6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ecc:	7c3b      	ldrb	r3, [r7, #16]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ee0:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	827b      	strh	r3, [r7, #18]
      break;
 8006ee6:	e002      	b.n	8006eee <USBH_AC_GetRes+0xe6>

    default:
      ret = USBH_FAIL;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	747b      	strb	r3, [r7, #17]
      break;
 8006eec:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006eee:	7c7b      	ldrb	r3, [r7, #17]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <USBH_AC_GetRes+0xf0>
  {
    return ret;
 8006ef4:	7c7b      	ldrb	r3, [r7, #17]
 8006ef6:	e017      	b.n	8006f28 <USBH_AC_GetRes+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	22a1      	movs	r2, #161	; 0xa1
 8006efc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2284      	movs	r2, #132	; 0x84
 8006f02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8afa      	ldrh	r2, [r7, #22]
 8006f08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	8aba      	ldrh	r2, [r7, #20]
 8006f0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	8a7a      	ldrh	r2, [r7, #18]
 8006f14:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006f1c:	8a7a      	ldrh	r2, [r7, #18]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fbfb 	bl	800871c <USBH_CtlReq>
 8006f26:	4603      	mov	r3, r0

}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	4608      	mov	r0, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	70fb      	strb	r3, [r7, #3]
 8006f42:	460b      	mov	r3, r1
 8006f44:	70bb      	strb	r3, [r7, #2]
 8006f46:	4613      	mov	r3, r2
 8006f48:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	82fb      	strh	r3, [r7, #22]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	82bb      	strh	r3, [r7, #20]
 8006f52:	2300      	movs	r3, #0
 8006f54:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	743b      	strb	r3, [r7, #16]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d039      	beq.n	8006fe6 <USBH_AC_GetMin+0xb6>
 8006f72:	2b06      	cmp	r3, #6
 8006f74:	d019      	beq.n	8006faa <USBH_AC_GetMin+0x7a>
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d14a      	bne.n	8007010 <USBH_AC_GetMin+0xe0>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7e:	78db      	ldrb	r3, [r3, #3]
 8006f80:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f86:	7c3b      	ldrb	r3, [r7, #16]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	021b      	lsls	r3, r3, #8
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	4313      	orrs	r3, r2
 8006f94:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f9a:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	827b      	strh	r3, [r7, #18]
      break;
 8006fa8:	e035      	b.n	8007016 <USBH_AC_GetMin+0xe6>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006faa:	78bb      	ldrb	r3, [r7, #2]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	3322      	adds	r3, #34	; 0x22
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	78db      	ldrb	r3, [r3, #3]
 8006fb8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006fbe:	7c3b      	ldrb	r3, [r7, #16]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006fce:	787b      	ldrb	r3, [r7, #1]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fe2:	827b      	strh	r3, [r7, #18]
      break;
 8006fe4:	e017      	b.n	8007016 <USBH_AC_GetMin+0xe6>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fec:	78db      	ldrb	r3, [r3, #3]
 8006fee:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ff4:	7c3b      	ldrb	r3, [r7, #16]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	4313      	orrs	r3, r2
 8007002:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007008:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800700a:	2301      	movs	r3, #1
 800700c:	827b      	strh	r3, [r7, #18]
      break;
 800700e:	e002      	b.n	8007016 <USBH_AC_GetMin+0xe6>

    default:
      ret = USBH_FAIL;
 8007010:	2302      	movs	r3, #2
 8007012:	747b      	strb	r3, [r7, #17]
      break;
 8007014:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007016:	7c7b      	ldrb	r3, [r7, #17]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <USBH_AC_GetMin+0xf0>
  {
    return ret;
 800701c:	7c7b      	ldrb	r3, [r7, #17]
 800701e:	e017      	b.n	8007050 <USBH_AC_GetMin+0x120>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	22a1      	movs	r2, #161	; 0xa1
 8007024:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2282      	movs	r2, #130	; 0x82
 800702a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8afa      	ldrh	r2, [r7, #22]
 8007030:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8aba      	ldrh	r2, [r7, #20]
 8007036:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	8a7a      	ldrh	r2, [r7, #18]
 800703c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007044:	8a7a      	ldrh	r2, [r7, #18]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 fb67 	bl	800871c <USBH_CtlReq>
 800704e:	4603      	mov	r3, r0

}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	460b      	mov	r3, r1
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8007066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800706a:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 800706c:	7afb      	ldrb	r3, [r7, #11]
 800706e:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8007070:	2303      	movs	r3, #3
 8007072:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2222      	movs	r2, #34	; 0x22
 8007078:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8afa      	ldrh	r2, [r7, #22]
 8007084:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8aba      	ldrh	r2, [r7, #20]
 800708a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8a7a      	ldrh	r2, [r7, #18]
 8007090:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8007092:	8a7b      	ldrh	r3, [r7, #18]
 8007094:	461a      	mov	r2, r3
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f001 fb3f 	bl	800871c <USBH_CtlReq>
 800709e:	4603      	mov	r3, r0

}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]

  return status;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80070cc:	2301      	movs	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	78db      	ldrb	r3, [r3, #3]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	f200 8090 	bhi.w	800720a <USBH_AUDIO_Control+0x146>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <USBH_AUDIO_Control+0x2c>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007105 	.word	0x08007105
 80070f4:	08007159 	.word	0x08007159
 80070f8:	0800720b 	.word	0x0800720b
 80070fc:	080071d7 	.word	0x080071d7
 8007100:	080071f1 	.word	0x080071f1
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d17d      	bne.n	800720e <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 800712a:	b2da      	uxtb	r2, r3
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fd03 	bl	8008b3e <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2202      	movs	r2, #2
 8007154:	70da      	strb	r2, [r3, #3]
      }
      break;
 8007156:	e05a      	b.n	800720e <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f002 f806 	bl	8009172 <USBH_LL_GetURBState>
 8007166:	4603      	mov	r3, r0
 8007168:	2b01      	cmp	r3, #1
 800716a:	d114      	bne.n	8007196 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007178:	3302      	adds	r3, #2
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	b29b      	uxth	r3, r3
 8007180:	4313      	orrs	r3, r2
 8007182:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8007184:	89fb      	ldrh	r3, [r7, #14]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f97a 	bl	8007484 <USBH_AUDIO_SetControlAttribute>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d03d      	beq.n	8007212 <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d333      	bcc.n	8007216 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fcb5 	bl	8008b3e <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 80071d4:	e01f      	b.n	8007216 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 80071d6:	2101      	movs	r1, #1
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f953 	bl	8007484 <USBH_AUDIO_SetControlAttribute>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11a      	bne.n	800721a <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	2201      	movs	r2, #1
 80071e8:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80071ee:	e014      	b.n	800721a <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 80071f0:	2102      	movs	r1, #2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f946 	bl	8007484 <USBH_AUDIO_SetControlAttribute>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10f      	bne.n	800721e <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2201      	movs	r2, #1
 8007202:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007208:	e009      	b.n	800721e <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 800720a:	bf00      	nop
 800720c:	e008      	b.n	8007220 <USBH_AUDIO_Control+0x15c>
      break;
 800720e:	bf00      	nop
 8007210:	e006      	b.n	8007220 <USBH_AUDIO_Control+0x15c>
          break;
 8007212:	bf00      	nop
 8007214:	e004      	b.n	8007220 <USBH_AUDIO_Control+0x15c>
      break;
 8007216:	bf00      	nop
 8007218:	e002      	b.n	8007220 <USBH_AUDIO_Control+0x15c>
      break;
 800721a:	bf00      	nop
 800721c:	e000      	b.n	8007220 <USBH_AUDIO_Control+0x15c>
      break;
 800721e:	bf00      	nop
  }

  return status;
 8007220:	7dfb      	ldrb	r3, [r7, #23]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop

0800722c <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007234:	2301      	movs	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	789b      	ldrb	r3, [r3, #2]
 8007246:	3b01      	subs	r3, #1
 8007248:	2b04      	cmp	r3, #4
 800724a:	d85c      	bhi.n	8007306 <USBH_AUDIO_OutputStream+0xda>
 800724c:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBH_AUDIO_OutputStream+0x28>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007269 	.word	0x08007269
 8007258:	080072c5 	.word	0x080072c5
 800725c:	0800728f 	.word	0x0800728f
 8007260:	080072fb 	.word	0x080072fb
 8007264:	080072f5 	.word	0x080072f5
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	3317      	adds	r3, #23
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4413      	add	r3, r2
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	79db      	ldrb	r3, [r3, #7]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2203      	movs	r2, #3
 8007282:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007284:	e044      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2202      	movs	r2, #2
 800728a:	709a      	strb	r2, [r3, #2]
      break;
 800728c:	e040      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	3317      	adds	r3, #23
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4413      	add	r3, r2
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	3308      	adds	r3, #8
 80072a0:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fed3 	bl	8007058 <USBH_AUDIO_SetEndpointControls>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d126      	bne.n	800730a <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2205      	movs	r2, #5
 80072c0:	709a      	strb	r2, [r3, #2]
      }
      break;
 80072c2:	e022      	b.n	800730a <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80072ca:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff febe 	bl	8007058 <USBH_AUDIO_SetEndpointControls>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d113      	bne.n	800730e <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2205      	movs	r2, #5
 80072ea:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f96e 	bl	80075ce <USBH_AUDIO_FrequencySet>
      }
      break;
 80072f2:	e00c      	b.n	800730e <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072f8:	e00a      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f80e 	bl	800731c <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	75fb      	strb	r3, [r7, #23]
      break;
 8007304:	e004      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 8007306:	bf00      	nop
 8007308:	e002      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe4>
      break;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <USBH_AUDIO_OutputStream+0xe4>
      break;
 800730e:	bf00      	nop
  }

  return status;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop

0800731c <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	791b      	ldrb	r3, [r3, #4]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d002      	beq.n	8007340 <USBH_AUDIO_Transmit+0x24>
 800733a:	2b02      	cmp	r3, #2
 800733c:	d033      	beq.n	80073a6 <USBH_AUDIO_Transmit+0x8a>
 800733e:	e096      	b.n	800746e <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	f040 8092 	bne.w	8007474 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2202      	movs	r2, #2
 8007360:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 800736e:	461a      	mov	r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 fc00 	bl	8008b7c <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8007382:	461a      	mov	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8007390:	461a      	mov	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073a4:	e066      	b.n	8007474 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 fedf 	bl	8009172 <USBH_LL_GetURBState>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d15e      	bne.n	8007478 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d352      	bcc.n	8007478 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d102      	bne.n	80073ee <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fe6b 	bl	80070c4 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d82b      	bhi.n	8007456 <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 800740a:	461a      	mov	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fbb2 	bl	8008b7c <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007424:	441a      	add	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8007438:	441a      	add	r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 800744c:	441a      	add	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8007454:	e010      	b.n	8007478 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800745c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2205      	movs	r2, #5
 8007464:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f8bb 	bl	80075e2 <USBH_AUDIO_BufferEmptyCallback>
      break;
 800746c:	e004      	b.n	8007478 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 800746e:	2302      	movs	r3, #2
 8007470:	73fb      	strb	r3, [r7, #15]
      break;
 8007472:	e002      	b.n	800747a <USBH_AUDIO_Transmit+0x15e>
      break;
 8007474:	bf00      	nop
 8007476:	e000      	b.n	800747a <USBH_AUDIO_Transmit+0x15e>
      break;
 8007478:	bf00      	nop
  }
  return status;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d002      	beq.n	80074aa <USBH_AUDIO_SetControlAttribute+0x26>
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d00b      	beq.n	80074c0 <USBH_AUDIO_SetControlAttribute+0x3c>
 80074a8:	e015      	b.n	80074d6 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80074b6:	441a      	add	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80074be:	e00d      	b.n	80074dc <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80074cc:	1ad2      	subs	r2, r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80074d4:	e002      	b.n	80074dc <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 80074d6:	2302      	movs	r3, #2
 80074d8:	73fb      	strb	r3, [r7, #15]
      break;
 80074da:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d905      	bls.n	80074f8 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007504:	429a      	cmp	r2, r3
 8007506:	d205      	bcs.n	8007514 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 8007526:	b29b      	uxth	r3, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f827 	bl	800757c <AUDIO_SetVolume>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d01e      	beq.n	8007572 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800753a:	2b01      	cmp	r3, #1
 800753c:	d10e      	bne.n	800755c <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
 800755a:	e007      	b.n	800756c <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007562:	3b01      	subs	r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2206      	movs	r2, #6
 8007570:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af02      	add	r7, sp, #8
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	461a      	mov	r2, r3
 800758a:	4603      	mov	r3, r0
 800758c:	70fb      	strb	r3, [r7, #3]
 800758e:	460b      	mov	r3, r1
 8007590:	70bb      	strb	r3, [r7, #2]
 8007592:	4613      	mov	r3, r2
 8007594:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007596:	2301      	movs	r3, #1
 8007598:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	883a      	ldrh	r2, [r7, #0]
 80075a8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	2302      	movs	r3, #2
 80075b0:	9301      	str	r3, [sp, #4]
 80075b2:	78bb      	ldrb	r3, [r7, #2]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	2302      	movs	r3, #2
 80075b8:	2106      	movs	r1, #6
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fa82 	bl	8006ac4 <USBH_AC_SetCur>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	4613      	mov	r3, r2
 8007602:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800760a:	2302      	movs	r3, #2
 800760c:	e029      	b.n	8007662 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	79fa      	ldrb	r2, [r7, #7]
 8007612:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f81f 	bl	800766a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f001 fc58 	bl	8008f10 <USBH_LL_Init>

  return USBH_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	e00a      	b.n	8007692 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	2200      	movs	r2, #0
 800768a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b0e      	cmp	r3, #14
 8007696:	d9f1      	bls.n	800767c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	e009      	b.n	80076b2 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076b8:	d3f1      	bcc.n	800769e <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2240      	movs	r2, #64	; 0x40
 80076de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d017      	beq.n	8007758 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10f      	bne.n	8007752 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007738:	1c59      	adds	r1, r3, #1
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	e004      	b.n	800775c <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007752:	2302      	movs	r3, #2
 8007754:	73fb      	strb	r3, [r7, #15]
 8007756:	e001      	b.n	800775c <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007758:	2302      	movs	r3, #2
 800775a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800776a:	b480      	push	{r7}
 800776c:	b087      	sub	sp, #28
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	4608      	mov	r0, r1
 8007774:	4611      	mov	r1, r2
 8007776:	461a      	mov	r2, r3
 8007778:	4603      	mov	r3, r0
 800777a:	70fb      	strb	r3, [r7, #3]
 800777c:	460b      	mov	r3, r1
 800777e:	70bb      	strb	r3, [r7, #2]
 8007780:	4613      	mov	r3, r2
 8007782:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007792:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007794:	e025      	b.n	80077e2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	221a      	movs	r2, #26
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	3308      	adds	r3, #8
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	3302      	adds	r3, #2
 80077a6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	795b      	ldrb	r3, [r3, #5]
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d002      	beq.n	80077b8 <USBH_FindInterface+0x4e>
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	2bff      	cmp	r3, #255	; 0xff
 80077b6:	d111      	bne.n	80077dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077bc:	78ba      	ldrb	r2, [r7, #2]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d002      	beq.n	80077c8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077c2:	78bb      	ldrb	r3, [r7, #2]
 80077c4:	2bff      	cmp	r3, #255	; 0xff
 80077c6:	d109      	bne.n	80077dc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077cc:	787a      	ldrb	r2, [r7, #1]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d002      	beq.n	80077d8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077d2:	787b      	ldrb	r3, [r7, #1]
 80077d4:	2bff      	cmp	r3, #255	; 0xff
 80077d6:	d101      	bne.n	80077dc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	e006      	b.n	80077ea <USBH_FindInterface+0x80>
    }
    if_ix++;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	3301      	adds	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	2b09      	cmp	r3, #9
 80077e6:	d9d6      	bls.n	8007796 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077e8:	23ff      	movs	r3, #255	; 0xff
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b087      	sub	sp, #28
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	460b      	mov	r3, r1
 8007800:	70fb      	strb	r3, [r7, #3]
 8007802:	4613      	mov	r3, r2
 8007804:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007814:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007816:	e017      	b.n	8007848 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	221a      	movs	r2, #26
 800781c:	fb02 f303 	mul.w	r3, r2, r3
 8007820:	3308      	adds	r3, #8
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4413      	add	r3, r2
 8007826:	3302      	adds	r3, #2
 8007828:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	789b      	ldrb	r3, [r3, #2]
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	429a      	cmp	r2, r3
 8007832:	d106      	bne.n	8007842 <USBH_FindInterfaceIndex+0x4c>
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	78db      	ldrb	r3, [r3, #3]
 8007838:	78ba      	ldrb	r2, [r7, #2]
 800783a:	429a      	cmp	r2, r3
 800783c:	d101      	bne.n	8007842 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	e006      	b.n	8007850 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	3301      	adds	r3, #1
 8007846:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	2b09      	cmp	r3, #9
 800784c:	d9e4      	bls.n	8007818 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800784e:	23ff      	movs	r3, #255	; 0xff
}
 8007850:	4618      	mov	r0, r3
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 fb8f 	bl	8008f88 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800786a:	2101      	movs	r1, #1
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fc93 	bl	8009198 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af04      	add	r7, sp, #16
 8007882:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007884:	2302      	movs	r3, #2
 8007886:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	d102      	bne.n	800789e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2203      	movs	r2, #3
 800789c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b0b      	cmp	r3, #11
 80078a6:	f200 81b5 	bhi.w	8007c14 <USBH_Process+0x398>
 80078aa:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <USBH_Process+0x34>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	080078e1 	.word	0x080078e1
 80078b4:	08007913 	.word	0x08007913
 80078b8:	0800797b 	.word	0x0800797b
 80078bc:	08007baf 	.word	0x08007baf
 80078c0:	08007c15 	.word	0x08007c15
 80078c4:	08007a1f 	.word	0x08007a1f
 80078c8:	08007b55 	.word	0x08007b55
 80078cc:	08007a55 	.word	0x08007a55
 80078d0:	08007a75 	.word	0x08007a75
 80078d4:	08007a95 	.word	0x08007a95
 80078d8:	08007ac3 	.word	0x08007ac3
 80078dc:	08007b97 	.word	0x08007b97
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8195 	beq.w	8007c18 <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80078f4:	20c8      	movs	r0, #200	; 0xc8
 80078f6:	f001 fc99 	bl	800922c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fb9f 	bl	800903e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007910:	e182      	b.n	8007c18 <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007918:	2b01      	cmp	r3, #1
 800791a:	d107      	bne.n	800792c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800792a:	e184      	b.n	8007c36 <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007936:	d914      	bls.n	8007962 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800793e:	3301      	adds	r3, #1
 8007940:	b2da      	uxtb	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800794e:	2b03      	cmp	r3, #3
 8007950:	d903      	bls.n	800795a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	220d      	movs	r2, #13
 8007956:	701a      	strb	r2, [r3, #0]
      break;
 8007958:	e16d      	b.n	8007c36 <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
      break;
 8007960:	e169      	b.n	8007c36 <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007968:	f103 020a 	add.w	r2, r3, #10
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 8007972:	200a      	movs	r0, #10
 8007974:	f001 fc5a 	bl	800922c <USBH_Delay>
      break;
 8007978:	e15d      	b.n	8007c36 <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800798a:	2104      	movs	r1, #4
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007990:	2064      	movs	r0, #100	; 0x64
 8007992:	f001 fc4b 	bl	800922c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 fb2c 	bl	8008ff4 <USBH_LL_GetSpeed>
 800799c:	4603      	mov	r3, r0
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2205      	movs	r2, #5
 80079aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80079ac:	2100      	movs	r1, #0
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 f92e 	bl	8008c10 <USBH_AllocPipe>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80079bc:	2180      	movs	r1, #128	; 0x80
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 f926 	bl	8008c10 <USBH_AllocPipe>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7919      	ldrb	r1, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079e0:	b292      	uxth	r2, r2
 80079e2:	9202      	str	r2, [sp, #8]
 80079e4:	2200      	movs	r2, #0
 80079e6:	9201      	str	r2, [sp, #4]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	4603      	mov	r3, r0
 80079ec:	2280      	movs	r2, #128	; 0x80
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 f8df 	bl	8008bb2 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7959      	ldrb	r1, [r3, #5]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a08:	b292      	uxth	r2, r2
 8007a0a:	9202      	str	r2, [sp, #8]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	4603      	mov	r3, r0
 8007a14:	2200      	movs	r2, #0
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 f8cb 	bl	8008bb2 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a1c:	e10b      	b.n	8007c36 <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f90e 	bl	8007c40 <USBH_HandleEnum>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f040 80f5 	bne.w	8007c1c <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d103      	bne.n	8007a4c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2208      	movs	r2, #8
 8007a48:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a4a:	e0e7      	b.n	8007c1c <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2207      	movs	r2, #7
 8007a50:	701a      	strb	r2, [r3, #0]
      break;
 8007a52:	e0e3      	b.n	8007c1c <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 80e0 	beq.w	8007c20 <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007a66:	2101      	movs	r1, #1
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2208      	movs	r2, #8
 8007a70:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a72:	e0d5      	b.n	8007c20 <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fc22 	bl	80082c8 <USBH_SetCfg>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f040 80cc 	bne.w	8007c24 <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2209      	movs	r2, #9
 8007a90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a92:	e0c7      	b.n	8007c24 <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007a9a:	f003 0320 	and.w	r3, r3, #32
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc59 	bl	800835c <USBH_SetFeature>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f040 80bb 	bne.w	8007c28 <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ab8:	e0b6      	b.n	8007c28 <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	220a      	movs	r2, #10
 8007abe:	701a      	strb	r2, [r3, #0]
      break;
 8007ac0:	e0b2      	b.n	8007c28 <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80af 	beq.w	8007c2c <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
 8007ada:	e018      	b.n	8007b0e <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007adc:	7bfa      	ldrb	r2, [r7, #15]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae8:	791a      	ldrb	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d109      	bne.n	8007b08 <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007af4:	7bfa      	ldrb	r2, [r7, #15]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007afc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8007b06:	e005      	b.n	8007b14 <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	73fb      	strb	r3, [r7, #15]
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0e3      	beq.n	8007adc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d016      	beq.n	8007b4c <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2206      	movs	r2, #6
 8007b34:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007b3c:	2103      	movs	r1, #3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b42:	e073      	b.n	8007c2c <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	220d      	movs	r2, #13
 8007b48:	701a      	strb	r2, [r3, #0]
      break;
 8007b4a:	e06f      	b.n	8007c2c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	220d      	movs	r2, #13
 8007b50:	701a      	strb	r2, [r3, #0]
      break;
 8007b52:	e06b      	b.n	8007c2c <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d017      	beq.n	8007b8e <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	220b      	movs	r2, #11
 8007b7a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b7c:	e058      	b.n	8007c30 <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d154      	bne.n	8007c30 <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	220d      	movs	r2, #13
 8007b8a:	701a      	strb	r2, [r3, #0]
      break;
 8007b8c:	e050      	b.n	8007c30 <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	220d      	movs	r2, #13
 8007b92:	701a      	strb	r2, [r3, #0]
      break;
 8007b94:	e04c      	b.n	8007c30 <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d049      	beq.n	8007c34 <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
      }
      break;
 8007bac:	e042      	b.n	8007c34 <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff fd57 	bl	800766a <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007bea:	2105      	movs	r1, #5
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d107      	bne.n	8007c0c <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff fe29 	bl	800785c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c0a:	e014      	b.n	8007c36 <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 f9bb 	bl	8008f88 <USBH_LL_Start>
      break;
 8007c12:	e010      	b.n	8007c36 <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 8007c14:	bf00      	nop
 8007c16:	e00e      	b.n	8007c36 <USBH_Process+0x3ba>
      break;
 8007c18:	bf00      	nop
 8007c1a:	e00c      	b.n	8007c36 <USBH_Process+0x3ba>
      break;
 8007c1c:	bf00      	nop
 8007c1e:	e00a      	b.n	8007c36 <USBH_Process+0x3ba>
    break;
 8007c20:	bf00      	nop
 8007c22:	e008      	b.n	8007c36 <USBH_Process+0x3ba>
      break;
 8007c24:	bf00      	nop
 8007c26:	e006      	b.n	8007c36 <USBH_Process+0x3ba>
      break;
 8007c28:	bf00      	nop
 8007c2a:	e004      	b.n	8007c36 <USBH_Process+0x3ba>
      break;
 8007c2c:	bf00      	nop
 8007c2e:	e002      	b.n	8007c36 <USBH_Process+0x3ba>
      break;
 8007c30:	bf00      	nop
 8007c32:	e000      	b.n	8007c36 <USBH_Process+0x3ba>
      break;
 8007c34:	bf00      	nop
  }
  return USBH_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af04      	add	r7, sp, #16
 8007c46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b07      	cmp	r3, #7
 8007c56:	f200 81c1 	bhi.w	8007fdc <USBH_HandleEnum+0x39c>
 8007c5a:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <USBH_HandleEnum+0x20>)
 8007c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c60:	08007c81 	.word	0x08007c81
 8007c64:	08007d3f 	.word	0x08007d3f
 8007c68:	08007da9 	.word	0x08007da9
 8007c6c:	08007e37 	.word	0x08007e37
 8007c70:	08007ea1 	.word	0x08007ea1
 8007c74:	08007f11 	.word	0x08007f11
 8007c78:	08007f57 	.word	0x08007f57
 8007c7c:	08007f9d 	.word	0x08007f9d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c80:	2108      	movs	r1, #8
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa50 	bl	8008128 <USBH_Get_DevDesc>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d130      	bne.n	8007cf4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7919      	ldrb	r1, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	9202      	str	r2, [sp, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2280      	movs	r2, #128	; 0x80
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 ff74 	bl	8008bb2 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	7959      	ldrb	r1, [r3, #5]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	9202      	str	r2, [sp, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	9201      	str	r2, [sp, #4]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2200      	movs	r2, #0
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 ff60 	bl	8008bb2 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007cf2:	e175      	b.n	8007fe0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cf4:	7bbb      	ldrb	r3, [r7, #14]
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	f040 8172 	bne.w	8007fe0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d02:	3301      	adds	r3, #1
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d903      	bls.n	8007d1e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	220d      	movs	r2, #13
 8007d1a:	701a      	strb	r2, [r3, #0]
      break;
 8007d1c:	e160      	b.n	8007fe0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	795b      	ldrb	r3, [r3, #5]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 ff95 	bl	8008c54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 ff8f 	bl	8008c54 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
      break;
 8007d3c:	e150      	b.n	8007fe0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007d3e:	2112      	movs	r1, #18
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f9f1 	bl	8008128 <USBH_Get_DevDesc>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d103      	bne.n	8007d58 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d56:	e145      	b.n	8007fe4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	f040 8142 	bne.w	8007fe4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d66:	3301      	adds	r3, #1
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d903      	bls.n	8007d82 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	220d      	movs	r2, #13
 8007d7e:	701a      	strb	r2, [r3, #0]
      break;
 8007d80:	e130      	b.n	8007fe4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	795b      	ldrb	r3, [r3, #5]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 ff63 	bl	8008c54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	791b      	ldrb	r3, [r3, #4]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 ff5d 	bl	8008c54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	701a      	strb	r2, [r3, #0]
      break;
 8007da6:	e11d      	b.n	8007fe4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007da8:	2101      	movs	r1, #1
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa68 	bl	8008280 <USBH_SetAddress>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d132      	bne.n	8007e20 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007dba:	2002      	movs	r0, #2
 8007dbc:	f001 fa36 	bl	800922c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2203      	movs	r2, #3
 8007dcc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	7919      	ldrb	r1, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007de2:	b292      	uxth	r2, r2
 8007de4:	9202      	str	r2, [sp, #8]
 8007de6:	2200      	movs	r2, #0
 8007de8:	9201      	str	r2, [sp, #4]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4603      	mov	r3, r0
 8007dee:	2280      	movs	r2, #128	; 0x80
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fede 	bl	8008bb2 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7959      	ldrb	r1, [r3, #5]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e0a:	b292      	uxth	r2, r2
 8007e0c:	9202      	str	r2, [sp, #8]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	9201      	str	r2, [sp, #4]
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	4603      	mov	r3, r0
 8007e16:	2200      	movs	r2, #0
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 feca 	bl	8008bb2 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e1e:	e0e3      	b.n	8007fe8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	f040 80e0 	bne.w	8007fe8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	220d      	movs	r2, #13
 8007e2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	705a      	strb	r2, [r3, #1]
      break;
 8007e34:	e0d8      	b.n	8007fe8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007e36:	2109      	movs	r1, #9
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f99d 	bl	8008178 <USBH_Get_CfgDesc>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d103      	bne.n	8007e50 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e4e:	e0cd      	b.n	8007fec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	f040 80ca 	bne.w	8007fec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e5e:	3301      	adds	r3, #1
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d903      	bls.n	8007e7a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	220d      	movs	r2, #13
 8007e76:	701a      	strb	r2, [r3, #0]
      break;
 8007e78:	e0b8      	b.n	8007fec <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	795b      	ldrb	r3, [r3, #5]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fee7 	bl	8008c54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	791b      	ldrb	r3, [r3, #4]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fee1 	bl	8008c54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
      break;
 8007e9e:	e0a5      	b.n	8007fec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f965 	bl	8008178 <USBH_Get_CfgDesc>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d103      	bne.n	8007ec0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2205      	movs	r2, #5
 8007ebc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ebe:	e097      	b.n	8007ff0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	f040 8094 	bne.w	8007ff0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ece:	3301      	adds	r3, #1
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d903      	bls.n	8007eea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	220d      	movs	r2, #13
 8007ee6:	701a      	strb	r2, [r3, #0]
      break;
 8007ee8:	e082      	b.n	8007ff0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	795b      	ldrb	r3, [r3, #5]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 feaf 	bl	8008c54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	791b      	ldrb	r3, [r3, #4]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fea9 	bl	8008c54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
      break;
 8007f0e:	e06f      	b.n	8007ff0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d019      	beq.n	8007f4e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f26:	23ff      	movs	r3, #255	; 0xff
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f949 	bl	80081c0 <USBH_Get_StringDesc>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d103      	bne.n	8007f40 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2206      	movs	r2, #6
 8007f3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f3e:	e059      	b.n	8007ff4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d156      	bne.n	8007ff4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2206      	movs	r2, #6
 8007f4a:	705a      	strb	r2, [r3, #1]
      break;
 8007f4c:	e052      	b.n	8007ff4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2206      	movs	r2, #6
 8007f52:	705a      	strb	r2, [r3, #1]
      break;
 8007f54:	e04e      	b.n	8007ff4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d019      	beq.n	8007f94 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f6c:	23ff      	movs	r3, #255	; 0xff
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f926 	bl	80081c0 <USBH_Get_StringDesc>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2207      	movs	r2, #7
 8007f82:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f84:	e038      	b.n	8007ff8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d135      	bne.n	8007ff8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2207      	movs	r2, #7
 8007f90:	705a      	strb	r2, [r3, #1]
      break;
 8007f92:	e031      	b.n	8007ff8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2207      	movs	r2, #7
 8007f98:	705a      	strb	r2, [r3, #1]
      break;
 8007f9a:	e02d      	b.n	8007ff8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d017      	beq.n	8007fd6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fb2:	23ff      	movs	r3, #255	; 0xff
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f903 	bl	80081c0 <USBH_Get_StringDesc>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007fc8:	e018      	b.n	8007ffc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d115      	bne.n	8007ffc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd4:	e012      	b.n	8007ffc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fda:	e00f      	b.n	8007ffc <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007fdc:	bf00      	nop
 8007fde:	e00e      	b.n	8007ffe <USBH_HandleEnum+0x3be>
      break;
 8007fe0:	bf00      	nop
 8007fe2:	e00c      	b.n	8007ffe <USBH_HandleEnum+0x3be>
      break;
 8007fe4:	bf00      	nop
 8007fe6:	e00a      	b.n	8007ffe <USBH_HandleEnum+0x3be>
      break;
 8007fe8:	bf00      	nop
 8007fea:	e008      	b.n	8007ffe <USBH_HandleEnum+0x3be>
      break;
 8007fec:	bf00      	nop
 8007fee:	e006      	b.n	8007ffe <USBH_HandleEnum+0x3be>
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e004      	b.n	8007ffe <USBH_HandleEnum+0x3be>
      break;
 8007ff4:	bf00      	nop
 8007ff6:	e002      	b.n	8007ffe <USBH_HandleEnum+0x3be>
      break;
 8007ff8:	bf00      	nop
 8007ffa:	e000      	b.n	8007ffe <USBH_HandleEnum+0x3be>
      break;
 8007ffc:	bf00      	nop
  }
  return Status;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f804 	bl	800804a <USBH_HandleSof>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b0b      	cmp	r3, #11
 800805a:	d10a      	bne.n	8008072 <USBH_HandleSof+0x28>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
  }
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800808a:	bf00      	nop
}
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80080a6:	bf00      	nop
}
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 ff5c 	bl	8008fbe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	791b      	ldrb	r3, [r3, #4]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fda1 	bl	8008c54 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	795b      	ldrb	r3, [r3, #5]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fd9b 	bl	8008c54 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af02      	add	r7, sp, #8
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	b29b      	uxth	r3, r3
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008146:	2100      	movs	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f864 	bl	8008216 <USBH_GetDescriptor>
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008164:	78fa      	ldrb	r2, [r7, #3]
 8008166:	b292      	uxth	r2, r2
 8008168:	4619      	mov	r1, r3
 800816a:	f000 f91b 	bl	80083a4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af02      	add	r7, sp, #8
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	331c      	adds	r3, #28
 8008188:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800818a:	887b      	ldrh	r3, [r7, #2]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008194:	2100      	movs	r1, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f83d 	bl	8008216 <USBH_GetDescriptor>
 800819c:	4603      	mov	r3, r0
 800819e:	72fb      	strb	r3, [r7, #11]
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d107      	bne.n	80081b6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80081ac:	887a      	ldrh	r2, [r7, #2]
 80081ae:	68f9      	ldr	r1, [r7, #12]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 f967 	bl	8008484 <USBH_ParseCfgDesc>
  }

  return status;
 80081b6:	7afb      	ldrb	r3, [r7, #11]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	461a      	mov	r2, r3
 80081cc:	460b      	mov	r3, r1
 80081ce:	72fb      	strb	r3, [r7, #11]
 80081d0:	4613      	mov	r3, r2
 80081d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80081dc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80081e4:	893b      	ldrh	r3, [r7, #8]
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	460b      	mov	r3, r1
 80081ea:	2100      	movs	r1, #0
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f812 	bl	8008216 <USBH_GetDescriptor>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d107      	bne.n	800820c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008202:	893a      	ldrh	r2, [r7, #8]
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fa3a 	bl	8008680 <USBH_ParseStringDesc>
  }

  return status;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	607b      	str	r3, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	72fb      	strb	r3, [r7, #11]
 8008224:	4613      	mov	r3, r2
 8008226:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	789b      	ldrb	r3, [r3, #2]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d11c      	bne.n	800826a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008230:	7afb      	ldrb	r3, [r7, #11]
 8008232:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008236:	b2da      	uxtb	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2206      	movs	r2, #6
 8008240:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	893a      	ldrh	r2, [r7, #8]
 8008246:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008248:	893b      	ldrh	r3, [r7, #8]
 800824a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800824e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008252:	d104      	bne.n	800825e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f240 4209 	movw	r2, #1033	; 0x409
 800825a:	829a      	strh	r2, [r3, #20]
 800825c:	e002      	b.n	8008264 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8b3a      	ldrh	r2, [r7, #24]
 8008268:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800826a:	8b3b      	ldrh	r3, [r7, #24]
 800826c:	461a      	mov	r2, r3
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fa53 	bl	800871c <USBH_CtlReq>
 8008276:	4603      	mov	r3, r0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	789b      	ldrb	r3, [r3, #2]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d10f      	bne.n	80082b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2205      	movs	r2, #5
 800829e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082b4:	2200      	movs	r2, #0
 80082b6:	2100      	movs	r1, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa2f 	bl	800871c <USBH_CtlReq>
 80082be:	4603      	mov	r3, r0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	789b      	ldrb	r3, [r3, #2]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d10e      	bne.n	80082fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2209      	movs	r2, #9
 80082e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	887a      	ldrh	r2, [r7, #2]
 80082ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082fa:	2200      	movs	r2, #0
 80082fc:	2100      	movs	r1, #0
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa0c 	bl	800871c <USBH_CtlReq>
 8008304:	4603      	mov	r3, r0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
 800831a:	4613      	mov	r3, r2
 800831c:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	789b      	ldrb	r3, [r3, #2]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d110      	bne.n	8008348 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	220b      	movs	r2, #11
 8008330:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8008332:	78bb      	ldrb	r3, [r7, #2]
 8008334:	b29a      	uxth	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008348:	2200      	movs	r2, #0
 800834a:	2100      	movs	r1, #0
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f9e5 	bl	800871c <USBH_CtlReq>
 8008352:	4603      	mov	r3, r0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	789b      	ldrb	r3, [r3, #2]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d10f      	bne.n	8008390 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2203      	movs	r2, #3
 800837a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	b29a      	uxth	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008390:	2200      	movs	r2, #0
 8008392:	2100      	movs	r1, #0
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f9c1 	bl	800871c <USBH_CtlReq>
 800839a:	4603      	mov	r3, r0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	781a      	ldrb	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	785a      	ldrb	r2, [r3, #1]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	3302      	adds	r3, #2
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	3303      	adds	r3, #3
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	4313      	orrs	r3, r2
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	791a      	ldrb	r2, [r3, #4]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	795a      	ldrb	r2, [r3, #5]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	799a      	ldrb	r2, [r3, #6]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	79da      	ldrb	r2, [r3, #7]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	2b08      	cmp	r3, #8
 8008402:	d939      	bls.n	8008478 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3308      	adds	r3, #8
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b29a      	uxth	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3309      	adds	r3, #9
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	b29b      	uxth	r3, r3
 8008418:	4313      	orrs	r3, r2
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	330a      	adds	r3, #10
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b29a      	uxth	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	330b      	adds	r3, #11
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	b29b      	uxth	r3, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	330c      	adds	r3, #12
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b29a      	uxth	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	330d      	adds	r3, #13
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	b29b      	uxth	r3, r3
 8008450:	4313      	orrs	r3, r2
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	7b9a      	ldrb	r2, [r3, #14]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	7bda      	ldrb	r2, [r3, #15]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	7c1a      	ldrb	r2, [r3, #16]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	7c5a      	ldrb	r2, [r3, #17]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	745a      	strb	r2, [r3, #17]
  }
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08a      	sub	sp, #40	; 0x28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	781a      	ldrb	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	785a      	ldrb	r2, [r3, #1]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3302      	adds	r3, #2
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	3303      	adds	r3, #3
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	4313      	orrs	r3, r2
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	791a      	ldrb	r2, [r3, #4]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	795a      	ldrb	r2, [r3, #5]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	799a      	ldrb	r2, [r3, #6]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	79da      	ldrb	r2, [r3, #7]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	7a1a      	ldrb	r2, [r3, #8]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80084fa:	88fb      	ldrh	r3, [r7, #6]
 80084fc:	2b09      	cmp	r3, #9
 80084fe:	d95f      	bls.n	80085c0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008500:	2309      	movs	r3, #9
 8008502:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008508:	e051      	b.n	80085ae <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800850a:	f107 0316 	add.w	r3, r7, #22
 800850e:	4619      	mov	r1, r3
 8008510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008512:	f000 f8e8 	bl	80086e6 <USBH_GetNextDesc>
 8008516:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	2b04      	cmp	r3, #4
 800851e:	d146      	bne.n	80085ae <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008524:	221a      	movs	r2, #26
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	3308      	adds	r3, #8
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	3302      	adds	r3, #2
 8008532:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008536:	69f8      	ldr	r0, [r7, #28]
 8008538:	f000 f846 	bl	80085c8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008542:	2300      	movs	r3, #0
 8008544:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008546:	e022      	b.n	800858e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008548:	f107 0316 	add.w	r3, r7, #22
 800854c:	4619      	mov	r1, r3
 800854e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008550:	f000 f8c9 	bl	80086e6 <USBH_GetNextDesc>
 8008554:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	2b05      	cmp	r3, #5
 800855c:	d117      	bne.n	800858e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800855e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008562:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008566:	3201      	adds	r2, #1
 8008568:	00d2      	lsls	r2, r2, #3
 800856a:	211a      	movs	r1, #26
 800856c:	fb01 f303 	mul.w	r3, r1, r3
 8008570:	4413      	add	r3, r2
 8008572:	3308      	adds	r3, #8
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4413      	add	r3, r2
 8008578:	3304      	adds	r3, #4
 800857a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800857c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800857e:	69b8      	ldr	r0, [r7, #24]
 8008580:	f000 f851 	bl	8008626 <USBH_ParseEPDesc>
            ep_ix++;
 8008584:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008588:	3301      	adds	r3, #1
 800858a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	791b      	ldrb	r3, [r3, #4]
 8008592:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008596:	429a      	cmp	r2, r3
 8008598:	d204      	bcs.n	80085a4 <USBH_ParseCfgDesc+0x120>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	885a      	ldrh	r2, [r3, #2]
 800859e:	8afb      	ldrh	r3, [r7, #22]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d8d1      	bhi.n	8008548 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80085a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085a8:	3301      	adds	r3, #1
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085b2:	2b09      	cmp	r3, #9
 80085b4:	d804      	bhi.n	80085c0 <USBH_ParseCfgDesc+0x13c>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	885a      	ldrh	r2, [r3, #2]
 80085ba:	8afb      	ldrh	r3, [r7, #22]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d8a4      	bhi.n	800850a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80085c0:	bf00      	nop
 80085c2:	3728      	adds	r7, #40	; 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	785a      	ldrb	r2, [r3, #1]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	789a      	ldrb	r2, [r3, #2]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	78da      	ldrb	r2, [r3, #3]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	791a      	ldrb	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	795a      	ldrb	r2, [r3, #5]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	799a      	ldrb	r2, [r3, #6]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	79da      	ldrb	r2, [r3, #7]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	7a1a      	ldrb	r2, [r3, #8]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	721a      	strb	r2, [r3, #8]
}
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781a      	ldrb	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	785a      	ldrb	r2, [r3, #1]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	789a      	ldrb	r2, [r3, #2]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	78da      	ldrb	r2, [r3, #3]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	3304      	adds	r3, #4
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	b29a      	uxth	r2, r3
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	3305      	adds	r3, #5
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	b29b      	uxth	r3, r3
 8008664:	4313      	orrs	r3, r2
 8008666:	b29a      	uxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	799a      	ldrb	r2, [r3, #6]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	719a      	strb	r2, [r3, #6]
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b03      	cmp	r3, #3
 8008696:	d120      	bne.n	80086da <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	1e9a      	subs	r2, r3, #2
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bf28      	it	cs
 80086a4:	4613      	movcs	r3, r2
 80086a6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3302      	adds	r3, #2
 80086ac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80086ae:	2300      	movs	r3, #0
 80086b0:	82fb      	strh	r3, [r7, #22]
 80086b2:	e00b      	b.n	80086cc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80086b4:	8afb      	ldrh	r3, [r7, #22]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	781a      	ldrb	r2, [r3, #0]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	3301      	adds	r3, #1
 80086c4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086c6:	8afb      	ldrh	r3, [r7, #22]
 80086c8:	3302      	adds	r3, #2
 80086ca:	82fb      	strh	r3, [r7, #22]
 80086cc:	8afa      	ldrh	r2, [r7, #22]
 80086ce:	8abb      	ldrh	r3, [r7, #20]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3ef      	bcc.n	80086b4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2200      	movs	r2, #0
 80086d8:	701a      	strb	r2, [r3, #0]
  }
}
 80086da:	bf00      	nop
 80086dc:	371c      	adds	r7, #28
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	881a      	ldrh	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800872a:	2301      	movs	r3, #1
 800872c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	789b      	ldrb	r3, [r3, #2]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d002      	beq.n	800873c <USBH_CtlReq+0x20>
 8008736:	2b02      	cmp	r3, #2
 8008738:	d00f      	beq.n	800875a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800873a:	e027      	b.n	800878c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	88fa      	ldrh	r2, [r7, #6]
 8008746:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2202      	movs	r2, #2
 8008752:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008754:	2301      	movs	r3, #1
 8008756:	75fb      	strb	r3, [r7, #23]
      break;
 8008758:	e018      	b.n	800878c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 f81c 	bl	8008798 <USBH_HandleControl>
 8008760:	4603      	mov	r3, r0
 8008762:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <USBH_CtlReq+0x54>
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d106      	bne.n	800877e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	761a      	strb	r2, [r3, #24]
      break;
 800877c:	e005      	b.n	800878a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d102      	bne.n	800878a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	709a      	strb	r2, [r3, #2]
      break;
 800878a:	bf00      	nop
  }
  return status;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af02      	add	r7, sp, #8
 800879e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80087a0:	2301      	movs	r3, #1
 80087a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	7e1b      	ldrb	r3, [r3, #24]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	2b0a      	cmp	r3, #10
 80087b0:	f200 8158 	bhi.w	8008a64 <USBH_HandleControl+0x2cc>
 80087b4:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <USBH_HandleControl+0x24>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	08008803 	.word	0x08008803
 80087c4:	0800886d 	.word	0x0800886d
 80087c8:	08008893 	.word	0x08008893
 80087cc:	080088cb 	.word	0x080088cb
 80087d0:	080088f7 	.word	0x080088f7
 80087d4:	08008949 	.word	0x08008949
 80087d8:	0800896b 	.word	0x0800896b
 80087dc:	080089a7 	.word	0x080089a7
 80087e0:	080089cf 	.word	0x080089cf
 80087e4:	08008a0d 	.word	0x08008a0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f103 0110 	add.w	r1, r3, #16
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	795b      	ldrb	r3, [r3, #5]
 80087f2:	461a      	mov	r2, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f945 	bl	8008a84 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2202      	movs	r2, #2
 80087fe:	761a      	strb	r2, [r3, #24]
      break;
 8008800:	e13b      	b.n	8008a7a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	795b      	ldrb	r3, [r3, #5]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fcb2 	bl	8009172 <USBH_LL_GetURBState>
 800880e:	4603      	mov	r3, r0
 8008810:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d11e      	bne.n	8008856 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7c1b      	ldrb	r3, [r3, #16]
 800881c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008820:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	8adb      	ldrh	r3, [r3, #22]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800882a:	7b7b      	ldrb	r3, [r7, #13]
 800882c:	2b80      	cmp	r3, #128	; 0x80
 800882e:	d103      	bne.n	8008838 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2203      	movs	r2, #3
 8008834:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008836:	e117      	b.n	8008a68 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2205      	movs	r2, #5
 800883c:	761a      	strb	r2, [r3, #24]
      break;
 800883e:	e113      	b.n	8008a68 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008840:	7b7b      	ldrb	r3, [r7, #13]
 8008842:	2b80      	cmp	r3, #128	; 0x80
 8008844:	d103      	bne.n	800884e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2209      	movs	r2, #9
 800884a:	761a      	strb	r2, [r3, #24]
      break;
 800884c:	e10c      	b.n	8008a68 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2207      	movs	r2, #7
 8008852:	761a      	strb	r2, [r3, #24]
      break;
 8008854:	e108      	b.n	8008a68 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b04      	cmp	r3, #4
 800885a:	d003      	beq.n	8008864 <USBH_HandleControl+0xcc>
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b02      	cmp	r3, #2
 8008860:	f040 8102 	bne.w	8008a68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	220b      	movs	r2, #11
 8008868:	761a      	strb	r2, [r3, #24]
      break;
 800886a:	e0fd      	b.n	8008a68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6899      	ldr	r1, [r3, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	899a      	ldrh	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	791b      	ldrb	r3, [r3, #4]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f93c 	bl	8008b02 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2204      	movs	r2, #4
 800888e:	761a      	strb	r2, [r3, #24]
      break;
 8008890:	e0f3      	b.n	8008a7a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	791b      	ldrb	r3, [r3, #4]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc6a 	bl	8009172 <USBH_LL_GetURBState>
 800889e:	4603      	mov	r3, r0
 80088a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d102      	bne.n	80088ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2209      	movs	r2, #9
 80088ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	2b05      	cmp	r3, #5
 80088b2:	d102      	bne.n	80088ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80088b4:	2303      	movs	r3, #3
 80088b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088b8:	e0d8      	b.n	8008a6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b04      	cmp	r3, #4
 80088be:	f040 80d5 	bne.w	8008a6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	220b      	movs	r2, #11
 80088c6:	761a      	strb	r2, [r3, #24]
      break;
 80088c8:	e0d0      	b.n	8008a6c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6899      	ldr	r1, [r3, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	899a      	ldrh	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	7958      	ldrb	r0, [r3, #5]
 80088d6:	2301      	movs	r3, #1
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	4603      	mov	r3, r0
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f8eb 	bl	8008ab8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2206      	movs	r2, #6
 80088f2:	761a      	strb	r2, [r3, #24]
      break;
 80088f4:	e0c1      	b.n	8008a7a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	795b      	ldrb	r3, [r3, #5]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc38 	bl	8009172 <USBH_LL_GetURBState>
 8008902:	4603      	mov	r3, r0
 8008904:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008906:	7bbb      	ldrb	r3, [r7, #14]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d103      	bne.n	8008914 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2207      	movs	r2, #7
 8008910:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008912:	e0ad      	b.n	8008a70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b05      	cmp	r3, #5
 8008918:	d105      	bne.n	8008926 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	220c      	movs	r2, #12
 800891e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008920:	2303      	movs	r3, #3
 8008922:	73fb      	strb	r3, [r7, #15]
      break;
 8008924:	e0a4      	b.n	8008a70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	2b02      	cmp	r3, #2
 800892a:	d103      	bne.n	8008934 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2205      	movs	r2, #5
 8008930:	761a      	strb	r2, [r3, #24]
      break;
 8008932:	e09d      	b.n	8008a70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	2b04      	cmp	r3, #4
 8008938:	f040 809a 	bne.w	8008a70 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	220b      	movs	r2, #11
 8008940:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008942:	2302      	movs	r3, #2
 8008944:	73fb      	strb	r3, [r7, #15]
      break;
 8008946:	e093      	b.n	8008a70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	791b      	ldrb	r3, [r3, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	2100      	movs	r1, #0
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f8d6 	bl	8008b02 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800895c:	b29a      	uxth	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2208      	movs	r2, #8
 8008966:	761a      	strb	r2, [r3, #24]

      break;
 8008968:	e087      	b.n	8008a7a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	791b      	ldrb	r3, [r3, #4]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fbfe 	bl	8009172 <USBH_LL_GetURBState>
 8008976:	4603      	mov	r3, r0
 8008978:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d105      	bne.n	800898c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	220d      	movs	r2, #13
 8008984:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800898a:	e073      	b.n	8008a74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b04      	cmp	r3, #4
 8008990:	d103      	bne.n	800899a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	220b      	movs	r2, #11
 8008996:	761a      	strb	r2, [r3, #24]
      break;
 8008998:	e06c      	b.n	8008a74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b05      	cmp	r3, #5
 800899e:	d169      	bne.n	8008a74 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80089a0:	2303      	movs	r3, #3
 80089a2:	73fb      	strb	r3, [r7, #15]
      break;
 80089a4:	e066      	b.n	8008a74 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	795a      	ldrb	r2, [r3, #5]
 80089aa:	2301      	movs	r3, #1
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	4613      	mov	r3, r2
 80089b0:	2200      	movs	r2, #0
 80089b2:	2100      	movs	r1, #0
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f87f 	bl	8008ab8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	220a      	movs	r2, #10
 80089ca:	761a      	strb	r2, [r3, #24]
      break;
 80089cc:	e055      	b.n	8008a7a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	795b      	ldrb	r3, [r3, #5]
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fbcc 	bl	8009172 <USBH_LL_GetURBState>
 80089da:	4603      	mov	r3, r0
 80089dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d105      	bne.n	80089f0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	220d      	movs	r2, #13
 80089ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089ee:	e043      	b.n	8008a78 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d103      	bne.n	80089fe <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2209      	movs	r2, #9
 80089fa:	761a      	strb	r2, [r3, #24]
      break;
 80089fc:	e03c      	b.n	8008a78 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
 8008a00:	2b04      	cmp	r3, #4
 8008a02:	d139      	bne.n	8008a78 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	220b      	movs	r2, #11
 8008a08:	761a      	strb	r2, [r3, #24]
      break;
 8008a0a:	e035      	b.n	8008a78 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7e5b      	ldrb	r3, [r3, #25]
 8008a10:	3301      	adds	r3, #1
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	765a      	strb	r2, [r3, #25]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	7e5b      	ldrb	r3, [r3, #25]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d806      	bhi.n	8008a2e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a2c:	e025      	b.n	8008a7a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008a34:	2106      	movs	r1, #6
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	795b      	ldrb	r3, [r3, #5]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f904 	bl	8008c54 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f8fe 	bl	8008c54 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	73fb      	strb	r3, [r7, #15]
      break;
 8008a62:	e00a      	b.n	8008a7a <USBH_HandleControl+0x2e2>

    default:
      break;
 8008a64:	bf00      	nop
 8008a66:	e008      	b.n	8008a7a <USBH_HandleControl+0x2e2>
      break;
 8008a68:	bf00      	nop
 8008a6a:	e006      	b.n	8008a7a <USBH_HandleControl+0x2e2>
      break;
 8008a6c:	bf00      	nop
 8008a6e:	e004      	b.n	8008a7a <USBH_HandleControl+0x2e2>
      break;
 8008a70:	bf00      	nop
 8008a72:	e002      	b.n	8008a7a <USBH_HandleControl+0x2e2>
      break;
 8008a74:	bf00      	nop
 8008a76:	e000      	b.n	8008a7a <USBH_HandleControl+0x2e2>
      break;
 8008a78:	bf00      	nop
  }

  return status;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af04      	add	r7, sp, #16
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a92:	79f9      	ldrb	r1, [r7, #7]
 8008a94:	2300      	movs	r3, #0
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	2308      	movs	r3, #8
 8008a9a:	9302      	str	r3, [sp, #8]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 fb31 	bl	8009110 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af04      	add	r7, sp, #16
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	80fb      	strh	r3, [r7, #6]
 8008aca:	4613      	mov	r3, r2
 8008acc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008adc:	7979      	ldrb	r1, [r7, #5]
 8008ade:	7e3b      	ldrb	r3, [r7, #24]
 8008ae0:	9303      	str	r3, [sp, #12]
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	9302      	str	r3, [sp, #8]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	2301      	movs	r3, #1
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	2200      	movs	r2, #0
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 fb0c 	bl	8009110 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b088      	sub	sp, #32
 8008b06:	af04      	add	r7, sp, #16
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	461a      	mov	r2, r3
 8008b10:	460b      	mov	r3, r1
 8008b12:	80fb      	strh	r3, [r7, #6]
 8008b14:	4613      	mov	r3, r2
 8008b16:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b18:	7979      	ldrb	r1, [r7, #5]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9303      	str	r3, [sp, #12]
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	9302      	str	r3, [sp, #8]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	2301      	movs	r3, #1
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 faee 	bl	8009110 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b34:	2300      	movs	r3, #0

}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b088      	sub	sp, #32
 8008b42:	af04      	add	r7, sp, #16
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	71fb      	strb	r3, [r7, #7]
 8008b50:	4613      	mov	r3, r2
 8008b52:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	79b9      	ldrb	r1, [r7, #6]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	9203      	str	r2, [sp, #12]
 8008b5e:	9302      	str	r3, [sp, #8]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	2301      	movs	r3, #1
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2303      	movs	r3, #3
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 facf 	bl	8009110 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af04      	add	r7, sp, #16
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	78f9      	ldrb	r1, [r7, #3]
 8008b90:	2200      	movs	r2, #0
 8008b92:	9203      	str	r2, [sp, #12]
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fab4 	bl	8009110 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af04      	add	r7, sp, #16
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	70fb      	strb	r3, [r7, #3]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70bb      	strb	r3, [r7, #2]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008bcc:	7878      	ldrb	r0, [r7, #1]
 8008bce:	78ba      	ldrb	r2, [r7, #2]
 8008bd0:	78f9      	ldrb	r1, [r7, #3]
 8008bd2:	8b3b      	ldrh	r3, [r7, #24]
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	7d3b      	ldrb	r3, [r7, #20]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	7c3b      	ldrb	r3, [r7, #16]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	4603      	mov	r3, r0
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fa47 	bl	8009074 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fa66 	bl	80090d2 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f839 	bl	8008c94 <USBH_GetFreePipe>
 8008c22:	4603      	mov	r3, r0
 8008c24:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c26:	89fb      	ldrh	r3, [r7, #14]
 8008c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00b      	beq.n	8008c48 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	89fb      	ldrh	r3, [r7, #14]
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c48:	89fb      	ldrh	r3, [r7, #14]
 8008c4a:	b2db      	uxtb	r3, r3
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	2b0a      	cmp	r3, #10
 8008c64:	d80f      	bhi.n	8008c86 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e010      	b.n	8008cc8 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	e007      	b.n	8008cd2 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	73fb      	strb	r3, [r7, #15]
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	2b0a      	cmp	r3, #10
 8008ccc:	d9eb      	bls.n	8008ca6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
	...

08008ce0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	490e      	ldr	r1, [pc, #56]	; (8008d20 <MX_USB_HOST_Init+0x40>)
 8008ce8:	480e      	ldr	r0, [pc, #56]	; (8008d24 <MX_USB_HOST_Init+0x44>)
 8008cea:	f7fe fc84 	bl	80075f6 <USBH_Init>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008cf4:	f7f7 fd96 	bl	8000824 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 8008cf8:	490b      	ldr	r1, [pc, #44]	; (8008d28 <MX_USB_HOST_Init+0x48>)
 8008cfa:	480a      	ldr	r0, [pc, #40]	; (8008d24 <MX_USB_HOST_Init+0x44>)
 8008cfc:	f7fe fd0a 	bl	8007714 <USBH_RegisterClass>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d06:	f7f7 fd8d 	bl	8000824 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d0a:	4806      	ldr	r0, [pc, #24]	; (8008d24 <MX_USB_HOST_Init+0x44>)
 8008d0c:	f7fe fda6 	bl	800785c <USBH_Start>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d16:	f7f7 fd85 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d1a:	bf00      	nop
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	08008d41 	.word	0x08008d41
 8008d24:	20000144 	.word	0x20000144
 8008d28:	2000000c 	.word	0x2000000c

08008d2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d30:	4802      	ldr	r0, [pc, #8]	; (8008d3c <MX_USB_HOST_Process+0x10>)
 8008d32:	f7fe fda3 	bl	800787c <USBH_Process>
}
 8008d36:	bf00      	nop
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000144 	.word	0x20000144

08008d40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d819      	bhi.n	8008d88 <USBH_UserProcess+0x48>
 8008d54:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <USBH_UserProcess+0x1c>)
 8008d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5a:	bf00      	nop
 8008d5c:	08008d89 	.word	0x08008d89
 8008d60:	08008d79 	.word	0x08008d79
 8008d64:	08008d89 	.word	0x08008d89
 8008d68:	08008d81 	.word	0x08008d81
 8008d6c:	08008d71 	.word	0x08008d71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d70:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <USBH_UserProcess+0x58>)
 8008d72:	2203      	movs	r2, #3
 8008d74:	701a      	strb	r2, [r3, #0]
  break;
 8008d76:	e008      	b.n	8008d8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d78:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <USBH_UserProcess+0x58>)
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	701a      	strb	r2, [r3, #0]
  break;
 8008d7e:	e004      	b.n	8008d8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d80:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <USBH_UserProcess+0x58>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	701a      	strb	r2, [r3, #0]
  break;
 8008d86:	e000      	b.n	8008d8a <USBH_UserProcess+0x4a>

  default:
  break;
 8008d88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d8a:	bf00      	nop
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	200000b4 	.word	0x200000b4

08008d9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08a      	sub	sp, #40	; 0x28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008da4:	f107 0314 	add.w	r3, r7, #20
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	605a      	str	r2, [r3, #4]
 8008dae:	609a      	str	r2, [r3, #8]
 8008db0:	60da      	str	r2, [r3, #12]
 8008db2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dbc:	d14e      	bne.n	8008e5c <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dbe:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	4a28      	ldr	r2, [pc, #160]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008dc4:	f043 0301 	orr.w	r3, r3, #1
 8008dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dca:	4b26      	ldr	r3, [pc, #152]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	613b      	str	r3, [r7, #16]
 8008dd4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008dd6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008de4:	2303      	movs	r3, #3
 8008de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008de8:	230a      	movs	r3, #10
 8008dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dec:	f107 0314 	add.w	r3, r7, #20
 8008df0:	4619      	mov	r1, r3
 8008df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008df6:	f7f7 fffd 	bl	8000df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dfa:	4b1a      	ldr	r3, [pc, #104]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dfe:	4a19      	ldr	r2, [pc, #100]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e06:	4b17      	ldr	r3, [pc, #92]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e12:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d114      	bne.n	8008e48 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e1e:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	4a10      	ldr	r2, [pc, #64]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e28:	6593      	str	r3, [r2, #88]	; 0x58
 8008e2a:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e32:	60bb      	str	r3, [r7, #8]
 8008e34:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008e36:	f7f9 feab 	bl	8002b90 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3e:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <HAL_HCD_MspInit+0xc8>)
 8008e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e44:	6593      	str	r3, [r2, #88]	; 0x58
 8008e46:	e001      	b.n	8008e4c <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008e48:	f7f9 fea2 	bl	8002b90 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2100      	movs	r1, #0
 8008e50:	2043      	movs	r0, #67	; 0x43
 8008e52:	f7f7 ff98 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e56:	2043      	movs	r0, #67	; 0x43
 8008e58:	f7f7 ffb1 	bl	8000dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e5c:	bf00      	nop
 8008e5e:	3728      	adds	r7, #40	; 0x28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	40021000 	.word	0x40021000

08008e68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7ff f8d5 	bl	8008026 <USBH_LL_IncTimer>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff f90d 	bl	80080b2 <USBH_LL_Connect>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff f916 	bl	80080e0 <USBH_LL_Disconnect>
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff f8c7 	bl	800807a <USBH_LL_PortEnabled>
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff f8c7 	bl	8008096 <USBH_LL_PortDisabled>
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d12a      	bne.n	8008f78 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f22:	4a18      	ldr	r2, [pc, #96]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a15      	ldr	r2, [pc, #84]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f2e:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f32:	4b14      	ldr	r3, [pc, #80]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f38:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8008f3a:	4b12      	ldr	r3, [pc, #72]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f3c:	220c      	movs	r2, #12
 8008f3e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f40:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f42:	2201      	movs	r2, #1
 8008f44:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f46:	4b0f      	ldr	r3, [pc, #60]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f4e:	2202      	movs	r2, #2
 8008f50:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f52:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f58:	480a      	ldr	r0, [pc, #40]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f5a:	f7f8 f90f 	bl	800117c <HAL_HCD_Init>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f64:	f7f7 fc5e 	bl	8000824 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f68:	4806      	ldr	r0, [pc, #24]	; (8008f84 <USBH_LL_Init+0x74>)
 8008f6a:	f7f8 fcfa 	bl	8001962 <HAL_HCD_GetCurrentFrame>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff f848 	bl	8008008 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	200005ec 	.word	0x200005ec

08008f88 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f8 fc7c 	bl	800189c <HAL_HCD_Start>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f94a 	bl	8009244 <USBH_Get_USB_Status>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7f8 fc84 	bl	80018e2 <HAL_HCD_Stop>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f92f 	bl	8009244 <USBH_Get_USB_Status>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009006:	4618      	mov	r0, r3
 8009008:	f7f8 fcb9 	bl	800197e <HAL_HCD_GetCurrentSpeed>
 800900c:	4603      	mov	r3, r0
 800900e:	2b01      	cmp	r3, #1
 8009010:	d007      	beq.n	8009022 <USBH_LL_GetSpeed+0x2e>
 8009012:	2b01      	cmp	r3, #1
 8009014:	d302      	bcc.n	800901c <USBH_LL_GetSpeed+0x28>
 8009016:	2b02      	cmp	r3, #2
 8009018:	d006      	beq.n	8009028 <USBH_LL_GetSpeed+0x34>
 800901a:	e008      	b.n	800902e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
    break;
 8009020:	e008      	b.n	8009034 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009022:	2301      	movs	r3, #1
 8009024:	73fb      	strb	r3, [r7, #15]
    break;
 8009026:	e005      	b.n	8009034 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009028:	2302      	movs	r3, #2
 800902a:	73fb      	strb	r3, [r7, #15]
    break;
 800902c:	e002      	b.n	8009034 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800902e:	2301      	movs	r3, #1
 8009030:	73fb      	strb	r3, [r7, #15]
    break;
 8009032:	bf00      	nop
  }
  return  speed;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009054:	4618      	mov	r0, r3
 8009056:	f7f8 fc61 	bl	800191c <HAL_HCD_ResetPort>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 f8ef 	bl	8009244 <USBH_Get_USB_Status>
 8009066:	4603      	mov	r3, r0
 8009068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800906a:	7bbb      	ldrb	r3, [r7, #14]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009074:	b590      	push	{r4, r7, lr}
 8009076:	b089      	sub	sp, #36	; 0x24
 8009078:	af04      	add	r7, sp, #16
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	4608      	mov	r0, r1
 800907e:	4611      	mov	r1, r2
 8009080:	461a      	mov	r2, r3
 8009082:	4603      	mov	r3, r0
 8009084:	70fb      	strb	r3, [r7, #3]
 8009086:	460b      	mov	r3, r1
 8009088:	70bb      	strb	r3, [r7, #2]
 800908a:	4613      	mov	r3, r2
 800908c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800909c:	787c      	ldrb	r4, [r7, #1]
 800909e:	78ba      	ldrb	r2, [r7, #2]
 80090a0:	78f9      	ldrb	r1, [r7, #3]
 80090a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090a4:	9302      	str	r3, [sp, #8]
 80090a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	4623      	mov	r3, r4
 80090b4:	f7f8 f8c4 	bl	8001240 <HAL_HCD_HC_Init>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 f8c0 	bl	8009244 <USBH_Get_USB_Status>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd90      	pop	{r4, r7, pc}

080090d2 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80090ec:	78fa      	ldrb	r2, [r7, #3]
 80090ee:	4611      	mov	r1, r2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7f8 f93d 	bl	8001370 <HAL_HCD_HC_Halt>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 f8a1 	bl	8009244 <USBH_Get_USB_Status>
 8009102:	4603      	mov	r3, r0
 8009104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009106:	7bbb      	ldrb	r3, [r7, #14]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009110:	b590      	push	{r4, r7, lr}
 8009112:	b089      	sub	sp, #36	; 0x24
 8009114:	af04      	add	r7, sp, #16
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	4608      	mov	r0, r1
 800911a:	4611      	mov	r1, r2
 800911c:	461a      	mov	r2, r3
 800911e:	4603      	mov	r3, r0
 8009120:	70fb      	strb	r3, [r7, #3]
 8009122:	460b      	mov	r3, r1
 8009124:	70bb      	strb	r3, [r7, #2]
 8009126:	4613      	mov	r3, r2
 8009128:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8009138:	787c      	ldrb	r4, [r7, #1]
 800913a:	78ba      	ldrb	r2, [r7, #2]
 800913c:	78f9      	ldrb	r1, [r7, #3]
 800913e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009142:	9303      	str	r3, [sp, #12]
 8009144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009146:	9302      	str	r3, [sp, #8]
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	4623      	mov	r3, r4
 8009154:	f7f8 f930 	bl	80013b8 <HAL_HCD_HC_SubmitRequest>
 8009158:	4603      	mov	r3, r0
 800915a:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	4618      	mov	r0, r3
 8009160:	f000 f870 	bl	8009244 <USBH_Get_USB_Status>
 8009164:	4603      	mov	r3, r0
 8009166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009168:	7bbb      	ldrb	r3, [r7, #14]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	bd90      	pop	{r4, r7, pc}

08009172 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	4611      	mov	r1, r2
 8009188:	4618      	mov	r0, r3
 800918a:	f7f8 fbd5 	bl	8001938 <HAL_HCD_HC_GetURBState>
 800918e:	4603      	mov	r3, r0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d103      	bne.n	80091b6 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 f873 	bl	800929c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091b6:	20c8      	movs	r0, #200	; 0xc8
 80091b8:	f7f7 fce8 	bl	8000b8c <HAL_Delay>
  return USBH_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b085      	sub	sp, #20
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
 80091d2:	4613      	mov	r3, r2
 80091d4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80091dc:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091de:	78fa      	ldrb	r2, [r7, #3]
 80091e0:	68f9      	ldr	r1, [r7, #12]
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	00db      	lsls	r3, r3, #3
 80091ea:	440b      	add	r3, r1
 80091ec:	333b      	adds	r3, #59	; 0x3b
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	68f9      	ldr	r1, [r7, #12]
 80091f8:	4613      	mov	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	440b      	add	r3, r1
 8009202:	3350      	adds	r3, #80	; 0x50
 8009204:	78ba      	ldrb	r2, [r7, #2]
 8009206:	701a      	strb	r2, [r3, #0]
 8009208:	e009      	b.n	800921e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	68f9      	ldr	r1, [r7, #12]
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	00db      	lsls	r3, r3, #3
 8009216:	440b      	add	r3, r1
 8009218:	3351      	adds	r3, #81	; 0x51
 800921a:	78ba      	ldrb	r2, [r7, #2]
 800921c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7f7 fca9 	bl	8000b8c <HAL_Delay>
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d817      	bhi.n	8009288 <USBH_Get_USB_Status+0x44>
 8009258:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <USBH_Get_USB_Status+0x1c>)
 800925a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925e:	bf00      	nop
 8009260:	08009271 	.word	0x08009271
 8009264:	08009277 	.word	0x08009277
 8009268:	0800927d 	.word	0x0800927d
 800926c:	08009283 	.word	0x08009283
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e00b      	b.n	800928e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009276:	2302      	movs	r3, #2
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	e008      	b.n	800928e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800927c:	2301      	movs	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	e005      	b.n	800928e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009282:	2302      	movs	r3, #2
 8009284:	73fb      	strb	r3, [r7, #15]
    break;
 8009286:	e002      	b.n	800928e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009288:	2302      	movs	r3, #2
 800928a:	73fb      	strb	r3, [r7, #15]
    break;
 800928c:	bf00      	nop
  }
  return usb_status;
 800928e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80092b0:	2301      	movs	r3, #1
 80092b2:	73fb      	strb	r3, [r7, #15]
 80092b4:	e001      	b.n	80092ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	461a      	mov	r2, r3
 80092be:	2140      	movs	r1, #64	; 0x40
 80092c0:	4803      	ldr	r0, [pc, #12]	; (80092d0 <MX_DriverVbusFS+0x34>)
 80092c2:	f7f7 ff29 	bl	8001118 <HAL_GPIO_WritePin>
}
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	48001800 	.word	0x48001800

080092d4 <__errno>:
 80092d4:	4b01      	ldr	r3, [pc, #4]	; (80092dc <__errno+0x8>)
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	2000002c 	.word	0x2000002c

080092e0 <__libc_init_array>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	4e0d      	ldr	r6, [pc, #52]	; (8009318 <__libc_init_array+0x38>)
 80092e4:	4c0d      	ldr	r4, [pc, #52]	; (800931c <__libc_init_array+0x3c>)
 80092e6:	1ba4      	subs	r4, r4, r6
 80092e8:	10a4      	asrs	r4, r4, #2
 80092ea:	2500      	movs	r5, #0
 80092ec:	42a5      	cmp	r5, r4
 80092ee:	d109      	bne.n	8009304 <__libc_init_array+0x24>
 80092f0:	4e0b      	ldr	r6, [pc, #44]	; (8009320 <__libc_init_array+0x40>)
 80092f2:	4c0c      	ldr	r4, [pc, #48]	; (8009324 <__libc_init_array+0x44>)
 80092f4:	f000 f8ea 	bl	80094cc <_init>
 80092f8:	1ba4      	subs	r4, r4, r6
 80092fa:	10a4      	asrs	r4, r4, #2
 80092fc:	2500      	movs	r5, #0
 80092fe:	42a5      	cmp	r5, r4
 8009300:	d105      	bne.n	800930e <__libc_init_array+0x2e>
 8009302:	bd70      	pop	{r4, r5, r6, pc}
 8009304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009308:	4798      	blx	r3
 800930a:	3501      	adds	r5, #1
 800930c:	e7ee      	b.n	80092ec <__libc_init_array+0xc>
 800930e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009312:	4798      	blx	r3
 8009314:	3501      	adds	r5, #1
 8009316:	e7f2      	b.n	80092fe <__libc_init_array+0x1e>
 8009318:	0800954c 	.word	0x0800954c
 800931c:	0800954c 	.word	0x0800954c
 8009320:	0800954c 	.word	0x0800954c
 8009324:	08009550 	.word	0x08009550

08009328 <malloc>:
 8009328:	4b02      	ldr	r3, [pc, #8]	; (8009334 <malloc+0xc>)
 800932a:	4601      	mov	r1, r0
 800932c:	6818      	ldr	r0, [r3, #0]
 800932e:	f000 b861 	b.w	80093f4 <_malloc_r>
 8009332:	bf00      	nop
 8009334:	2000002c 	.word	0x2000002c

08009338 <free>:
 8009338:	4b02      	ldr	r3, [pc, #8]	; (8009344 <free+0xc>)
 800933a:	4601      	mov	r1, r0
 800933c:	6818      	ldr	r0, [r3, #0]
 800933e:	f000 b80b 	b.w	8009358 <_free_r>
 8009342:	bf00      	nop
 8009344:	2000002c 	.word	0x2000002c

08009348 <memset>:
 8009348:	4402      	add	r2, r0
 800934a:	4603      	mov	r3, r0
 800934c:	4293      	cmp	r3, r2
 800934e:	d100      	bne.n	8009352 <memset+0xa>
 8009350:	4770      	bx	lr
 8009352:	f803 1b01 	strb.w	r1, [r3], #1
 8009356:	e7f9      	b.n	800934c <memset+0x4>

08009358 <_free_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4605      	mov	r5, r0
 800935c:	2900      	cmp	r1, #0
 800935e:	d045      	beq.n	80093ec <_free_r+0x94>
 8009360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009364:	1f0c      	subs	r4, r1, #4
 8009366:	2b00      	cmp	r3, #0
 8009368:	bfb8      	it	lt
 800936a:	18e4      	addlt	r4, r4, r3
 800936c:	f000 f8ac 	bl	80094c8 <__malloc_lock>
 8009370:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <_free_r+0x98>)
 8009372:	6813      	ldr	r3, [r2, #0]
 8009374:	4610      	mov	r0, r2
 8009376:	b933      	cbnz	r3, 8009386 <_free_r+0x2e>
 8009378:	6063      	str	r3, [r4, #4]
 800937a:	6014      	str	r4, [r2, #0]
 800937c:	4628      	mov	r0, r5
 800937e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009382:	f000 b8a2 	b.w	80094ca <__malloc_unlock>
 8009386:	42a3      	cmp	r3, r4
 8009388:	d90c      	bls.n	80093a4 <_free_r+0x4c>
 800938a:	6821      	ldr	r1, [r4, #0]
 800938c:	1862      	adds	r2, r4, r1
 800938e:	4293      	cmp	r3, r2
 8009390:	bf04      	itt	eq
 8009392:	681a      	ldreq	r2, [r3, #0]
 8009394:	685b      	ldreq	r3, [r3, #4]
 8009396:	6063      	str	r3, [r4, #4]
 8009398:	bf04      	itt	eq
 800939a:	1852      	addeq	r2, r2, r1
 800939c:	6022      	streq	r2, [r4, #0]
 800939e:	6004      	str	r4, [r0, #0]
 80093a0:	e7ec      	b.n	800937c <_free_r+0x24>
 80093a2:	4613      	mov	r3, r2
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	b10a      	cbz	r2, 80093ac <_free_r+0x54>
 80093a8:	42a2      	cmp	r2, r4
 80093aa:	d9fa      	bls.n	80093a2 <_free_r+0x4a>
 80093ac:	6819      	ldr	r1, [r3, #0]
 80093ae:	1858      	adds	r0, r3, r1
 80093b0:	42a0      	cmp	r0, r4
 80093b2:	d10b      	bne.n	80093cc <_free_r+0x74>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	4401      	add	r1, r0
 80093b8:	1858      	adds	r0, r3, r1
 80093ba:	4282      	cmp	r2, r0
 80093bc:	6019      	str	r1, [r3, #0]
 80093be:	d1dd      	bne.n	800937c <_free_r+0x24>
 80093c0:	6810      	ldr	r0, [r2, #0]
 80093c2:	6852      	ldr	r2, [r2, #4]
 80093c4:	605a      	str	r2, [r3, #4]
 80093c6:	4401      	add	r1, r0
 80093c8:	6019      	str	r1, [r3, #0]
 80093ca:	e7d7      	b.n	800937c <_free_r+0x24>
 80093cc:	d902      	bls.n	80093d4 <_free_r+0x7c>
 80093ce:	230c      	movs	r3, #12
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	e7d3      	b.n	800937c <_free_r+0x24>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	1821      	adds	r1, r4, r0
 80093d8:	428a      	cmp	r2, r1
 80093da:	bf04      	itt	eq
 80093dc:	6811      	ldreq	r1, [r2, #0]
 80093de:	6852      	ldreq	r2, [r2, #4]
 80093e0:	6062      	str	r2, [r4, #4]
 80093e2:	bf04      	itt	eq
 80093e4:	1809      	addeq	r1, r1, r0
 80093e6:	6021      	streq	r1, [r4, #0]
 80093e8:	605c      	str	r4, [r3, #4]
 80093ea:	e7c7      	b.n	800937c <_free_r+0x24>
 80093ec:	bd38      	pop	{r3, r4, r5, pc}
 80093ee:	bf00      	nop
 80093f0:	200000b8 	.word	0x200000b8

080093f4 <_malloc_r>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	1ccd      	adds	r5, r1, #3
 80093f8:	f025 0503 	bic.w	r5, r5, #3
 80093fc:	3508      	adds	r5, #8
 80093fe:	2d0c      	cmp	r5, #12
 8009400:	bf38      	it	cc
 8009402:	250c      	movcc	r5, #12
 8009404:	2d00      	cmp	r5, #0
 8009406:	4606      	mov	r6, r0
 8009408:	db01      	blt.n	800940e <_malloc_r+0x1a>
 800940a:	42a9      	cmp	r1, r5
 800940c:	d903      	bls.n	8009416 <_malloc_r+0x22>
 800940e:	230c      	movs	r3, #12
 8009410:	6033      	str	r3, [r6, #0]
 8009412:	2000      	movs	r0, #0
 8009414:	bd70      	pop	{r4, r5, r6, pc}
 8009416:	f000 f857 	bl	80094c8 <__malloc_lock>
 800941a:	4a21      	ldr	r2, [pc, #132]	; (80094a0 <_malloc_r+0xac>)
 800941c:	6814      	ldr	r4, [r2, #0]
 800941e:	4621      	mov	r1, r4
 8009420:	b991      	cbnz	r1, 8009448 <_malloc_r+0x54>
 8009422:	4c20      	ldr	r4, [pc, #128]	; (80094a4 <_malloc_r+0xb0>)
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	b91b      	cbnz	r3, 8009430 <_malloc_r+0x3c>
 8009428:	4630      	mov	r0, r6
 800942a:	f000 f83d 	bl	80094a8 <_sbrk_r>
 800942e:	6020      	str	r0, [r4, #0]
 8009430:	4629      	mov	r1, r5
 8009432:	4630      	mov	r0, r6
 8009434:	f000 f838 	bl	80094a8 <_sbrk_r>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d124      	bne.n	8009486 <_malloc_r+0x92>
 800943c:	230c      	movs	r3, #12
 800943e:	6033      	str	r3, [r6, #0]
 8009440:	4630      	mov	r0, r6
 8009442:	f000 f842 	bl	80094ca <__malloc_unlock>
 8009446:	e7e4      	b.n	8009412 <_malloc_r+0x1e>
 8009448:	680b      	ldr	r3, [r1, #0]
 800944a:	1b5b      	subs	r3, r3, r5
 800944c:	d418      	bmi.n	8009480 <_malloc_r+0x8c>
 800944e:	2b0b      	cmp	r3, #11
 8009450:	d90f      	bls.n	8009472 <_malloc_r+0x7e>
 8009452:	600b      	str	r3, [r1, #0]
 8009454:	50cd      	str	r5, [r1, r3]
 8009456:	18cc      	adds	r4, r1, r3
 8009458:	4630      	mov	r0, r6
 800945a:	f000 f836 	bl	80094ca <__malloc_unlock>
 800945e:	f104 000b 	add.w	r0, r4, #11
 8009462:	1d23      	adds	r3, r4, #4
 8009464:	f020 0007 	bic.w	r0, r0, #7
 8009468:	1ac3      	subs	r3, r0, r3
 800946a:	d0d3      	beq.n	8009414 <_malloc_r+0x20>
 800946c:	425a      	negs	r2, r3
 800946e:	50e2      	str	r2, [r4, r3]
 8009470:	e7d0      	b.n	8009414 <_malloc_r+0x20>
 8009472:	428c      	cmp	r4, r1
 8009474:	684b      	ldr	r3, [r1, #4]
 8009476:	bf16      	itet	ne
 8009478:	6063      	strne	r3, [r4, #4]
 800947a:	6013      	streq	r3, [r2, #0]
 800947c:	460c      	movne	r4, r1
 800947e:	e7eb      	b.n	8009458 <_malloc_r+0x64>
 8009480:	460c      	mov	r4, r1
 8009482:	6849      	ldr	r1, [r1, #4]
 8009484:	e7cc      	b.n	8009420 <_malloc_r+0x2c>
 8009486:	1cc4      	adds	r4, r0, #3
 8009488:	f024 0403 	bic.w	r4, r4, #3
 800948c:	42a0      	cmp	r0, r4
 800948e:	d005      	beq.n	800949c <_malloc_r+0xa8>
 8009490:	1a21      	subs	r1, r4, r0
 8009492:	4630      	mov	r0, r6
 8009494:	f000 f808 	bl	80094a8 <_sbrk_r>
 8009498:	3001      	adds	r0, #1
 800949a:	d0cf      	beq.n	800943c <_malloc_r+0x48>
 800949c:	6025      	str	r5, [r4, #0]
 800949e:	e7db      	b.n	8009458 <_malloc_r+0x64>
 80094a0:	200000b8 	.word	0x200000b8
 80094a4:	200000bc 	.word	0x200000bc

080094a8 <_sbrk_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4c06      	ldr	r4, [pc, #24]	; (80094c4 <_sbrk_r+0x1c>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4605      	mov	r5, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	f7f7 fa60 	bl	8000978 <_sbrk>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_sbrk_r+0x1a>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_sbrk_r+0x1a>
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	200008b0 	.word	0x200008b0

080094c8 <__malloc_lock>:
 80094c8:	4770      	bx	lr

080094ca <__malloc_unlock>:
 80094ca:	4770      	bx	lr

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
